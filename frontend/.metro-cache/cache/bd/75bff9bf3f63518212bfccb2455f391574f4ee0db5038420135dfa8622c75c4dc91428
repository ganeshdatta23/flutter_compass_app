{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":52,"index":52}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"expo-sensors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":53},"end":{"line":2,"column":44,"index":97}}],"key":"BFOmcY3heoZY/RSSPg5xbOpveWQ=","exportNames":["*"],"imports":1}},{"name":"expo-haptics","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":98},"end":{"line":3,"column":40,"index":138}}],"key":"XxdHVlyuI491+26LeQ/AtfIvhac=","exportNames":["*"],"imports":1}},{"name":"../services/locationService","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":139},"end":{"line":4,"column":89,"index":228}}],"key":"I9192BMih11C1JeQ/D4NvvvO+Yw=","exportNames":["*"],"imports":1}},{"name":"../services/supabaseService","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":229},"end":{"line":5,"column":76,"index":305}}],"key":"S7aIFJ3C9gVBZ6jVd0JtOpUan6k=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/AppState","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"JfCM6WRyn2619+pzBJhEHd1+SSw=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.useCompass = useCompass;\n  var _react = require(_dependencyMap[0], \"react\");\n  var _expoSensors = require(_dependencyMap[1], \"expo-sensors\");\n  var _expoHaptics = require(_dependencyMap[2], \"expo-haptics\");\n  var Haptics = _interopNamespace(_expoHaptics);\n  var _servicesLocationService = require(_dependencyMap[3], \"../services/locationService\");\n  var _servicesSupabaseService = require(_dependencyMap[4], \"../services/supabaseService\");\n  var _reactNativeWebDistExportsAppState = require(_dependencyMap[5], \"react-native-web/dist/exports/AppState\");\n  var AppState = _interopDefault(_reactNativeWebDistExportsAppState);\n  function useCompass() {\n    const [compassData, setCompassData] = (0, _react.useState)({\n      heading: 0,\n      userLocation: null,\n      targetLocation: null,\n      bearingData: null,\n      isAligned: false,\n      turnDirection: null,\n      turnAngle: 0,\n      distance: 0,\n      isLoading: true,\n      error: null,\n      permissionGranted: false\n    });\n    const [wasAligned, setWasAligned] = (0, _react.useState)(false);\n    const [manuallyClosedDarshan, setManuallyClosedDarshan] = (0, _react.useState)(false);\n    const lastHapticTime = (0, _react.useRef)(0);\n    const locationUpdateInterval = (0, _react.useRef)(null);\n    const motionSubscription = (0, _react.useRef)(null);\n\n    // Initialize compass and location services\n    (0, _react.useEffect)(() => {\n      let mounted = true;\n      const initializeServices = async () => {\n        try {\n          // Request location permissions\n          const hasPermission = await _servicesLocationService.LocationService.requestPermissions();\n          if (!mounted) return;\n          if (!hasPermission) {\n            setCompassData(prev => ({\n              ...prev,\n              error: 'Location permission is required for compass functionality',\n              isLoading: false,\n              permissionGranted: false\n            }));\n            return;\n          }\n          setCompassData(prev => ({\n            ...prev,\n            permissionGranted: true\n          }));\n\n          // Get initial target location from Supabase\n          const targetLocation = await _servicesSupabaseService.SupabaseService.getSwamijiLocation();\n          if (!mounted) return;\n          if (!targetLocation) {\n            // Use default location if not found in database\n            const defaultLocation = {\n              id: 'swamiji_location',\n              latitude: 12.308367,\n              longitude: 76.645467,\n              address: 'Avadhoota Datta Peetham',\n              updated_at: new Date().toISOString()\n            };\n            setCompassData(prev => ({\n              ...prev,\n              targetLocation: defaultLocation\n            }));\n          } else {\n            setCompassData(prev => ({\n              ...prev,\n              targetLocation\n            }));\n          }\n\n          // Get initial user location\n          const userLocation = await _servicesLocationService.LocationService.getCurrentLocation();\n          if (!mounted) return;\n          if (userLocation) {\n            setCompassData(prev => ({\n              ...prev,\n              userLocation\n            }));\n          }\n\n          // Start location updates\n          const locationStarted = await _servicesLocationService.LocationService.startWatchingLocation(location => {\n            if (!mounted) return;\n            setCompassData(prev => ({\n              ...prev,\n              userLocation: location\n            }));\n          });\n          if (!locationStarted) {\n            setCompassData(prev => ({\n              ...prev,\n              error: 'Failed to start location tracking'\n            }));\n          }\n\n          // Start magnetometer (compass) updates\n          const isAvailable = await _expoSensors.Magnetometer.isAvailableAsync();\n          if (isAvailable) {\n            _expoSensors.Magnetometer.setUpdateInterval(100); // Update every 100ms\n            motionSubscription.current = _expoSensors.Magnetometer.addListener(magnetometerData => {\n              if (!mounted) return;\n\n              // Calculate heading from magnetometer data\n              const {\n                x,\n                y\n              } = magnetometerData;\n              let heading = Math.atan2(y, x) * (180 / Math.PI);\n              // Normalize to 0-360 degrees\n              heading = (heading + 360) % 360;\n              setCompassData(prev => ({\n                ...prev,\n                heading\n              }));\n            });\n          } else {\n            // Fallback: simulate compass for testing (slowly rotating)\n            let simulatedHeading = 0;\n            const simulationInterval = setInterval(() => {\n              if (!mounted) return;\n              simulatedHeading = (simulatedHeading + 1) % 360;\n              setCompassData(prev => ({\n                ...prev,\n                heading: simulatedHeading\n              }));\n            }, 100);\n\n            // Store interval for cleanup\n            motionSubscription.current = {\n              remove: () => clearInterval(simulationInterval)\n            };\n          }\n          setCompassData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n        } catch (error) {\n          if (!mounted) return;\n          console.error('Error initializing compass services:', error);\n          setCompassData(prev => ({\n            ...prev,\n            error: 'Failed to initialize compass services',\n            isLoading: false\n          }));\n        }\n      };\n      initializeServices();\n\n      // Set up periodic target location updates (every 30 seconds)\n      locationUpdateInterval.current = setInterval(async () => {\n        if (!mounted) return;\n        const targetLocation = await _servicesSupabaseService.SupabaseService.getSwamijiLocation();\n        if (targetLocation && mounted) {\n          setCompassData(prev => ({\n            ...prev,\n            targetLocation\n          }));\n        }\n      }, 30000);\n      return () => {\n        mounted = false;\n        _servicesLocationService.LocationService.stopWatchingLocation();\n        if (motionSubscription.current) {\n          motionSubscription.current.remove();\n        }\n        if (locationUpdateInterval.current) {\n          clearInterval(locationUpdateInterval.current);\n        }\n      };\n    }, []);\n\n    // Calculate bearing and alignment when location or heading changes\n    (0, _react.useEffect)(() => {\n      if (!compassData.userLocation || !compassData.targetLocation) return;\n      const bearingData = _servicesLocationService.LocationService.calculateBearingData(compassData.userLocation, compassData.targetLocation);\n      const isAligned = _servicesLocationService.LocationService.isAligned(compassData.heading, bearingData.bearing, 20);\n      const turnInfo = _servicesLocationService.LocationService.getTurnDirection(compassData.heading, bearingData.bearing);\n      setCompassData(prev => ({\n        ...prev,\n        bearingData,\n        isAligned,\n        turnDirection: isAligned ? null : turnInfo.direction,\n        turnAngle: turnInfo.angle,\n        distance: bearingData.distance\n      }));\n\n      // Handle haptic feedback for alignment\n      if (isAligned && !wasAligned && !manuallyClosedDarshan) {\n        const now = Date.now();\n        if (now - lastHapticTime.current > 2000) {\n          // Prevent too frequent haptics\n          Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);\n          lastHapticTime.current = now;\n        }\n        setWasAligned(true);\n      } else if (!isAligned && wasAligned) {\n        setWasAligned(false);\n      }\n    }, [compassData.heading, compassData.userLocation, compassData.targetLocation, wasAligned, manuallyClosedDarshan]);\n\n    // Handle app state changes (pause/resume)\n    (0, _react.useEffect)(() => {\n      const handleAppStateChange = nextAppState => {\n        if (nextAppState === 'background') {\n          // Pause location updates to save battery\n          _servicesLocationService.LocationService.stopWatchingLocation();\n          if (motionSubscription.current) {\n            motionSubscription.current.remove();\n            motionSubscription.current = null;\n          }\n        } else if (nextAppState === 'active') {\n          // Resume location updates\n          _servicesLocationService.LocationService.startWatchingLocation(location => {\n            setCompassData(prev => ({\n              ...prev,\n              userLocation: location\n            }));\n          });\n\n          // Resume magnetometer updates\n          _expoSensors.Magnetometer.isAvailableAsync().then(isAvailable => {\n            if (isAvailable && !motionSubscription.current) {\n              motionSubscription.current = _expoSensors.Magnetometer.addListener(magnetometerData => {\n                const {\n                  x,\n                  y\n                } = magnetometerData;\n                let heading = Math.atan2(y, x) * (180 / Math.PI);\n                heading = (heading + 360) % 360;\n                setCompassData(prev => ({\n                  ...prev,\n                  heading\n                }));\n              });\n            }\n          });\n        }\n      };\n      const subscription = AppState.default.addEventListener('change', handleAppStateChange);\n      return () => subscription?.remove();\n    }, []);\n\n    // Methods for darshan management\n    const closeDarshan = () => {\n      setManuallyClosedDarshan(true);\n      setWasAligned(false);\n    };\n    const resetDarshanState = () => {\n      setManuallyClosedDarshan(false);\n      setWasAligned(false);\n    };\n\n    // Check if darshan should be shown\n    const shouldShowDarshan = compassData.isAligned && !manuallyClosedDarshan;\n    return {\n      ...compassData,\n      shouldShowDarshan,\n      closeDarshan,\n      resetDarshanState\n    };\n  }\n});","lineCount":292,"map":[[27,2,22,0,"exports"],[27,9,22,0],[27,10,22,0,"useCompass"],[27,20,22,0],[27,23,22,0,"useCompass"],[27,33,22,0],[28,2,1,0],[28,6,1,0,"_react"],[28,12,1,0],[28,15,1,0,"require"],[28,22,1,0],[28,23,1,0,"_dependencyMap"],[28,37,1,0],[29,2,2,0],[29,6,2,0,"_expoSensors"],[29,18,2,0],[29,21,2,0,"require"],[29,28,2,0],[29,29,2,0,"_dependencyMap"],[29,43,2,0],[30,2,3,0],[30,6,3,0,"_expoHaptics"],[30,18,3,0],[30,21,3,0,"require"],[30,28,3,0],[30,29,3,0,"_dependencyMap"],[30,43,3,0],[31,2,3,0],[31,6,3,0,"Haptics"],[31,13,3,0],[31,16,3,0,"_interopNamespace"],[31,33,3,0],[31,34,3,0,"_expoHaptics"],[31,46,3,0],[32,2,4,0],[32,6,4,0,"_servicesLocationService"],[32,30,4,0],[32,33,4,0,"require"],[32,40,4,0],[32,41,4,0,"_dependencyMap"],[32,55,4,0],[33,2,5,0],[33,6,5,0,"_servicesSupabaseService"],[33,30,5,0],[33,33,5,0,"require"],[33,40,5,0],[33,41,5,0,"_dependencyMap"],[33,55,5,0],[34,2,5,76],[34,6,5,76,"_reactNativeWebDistExportsAppState"],[34,40,5,76],[34,43,5,76,"require"],[34,50,5,76],[34,51,5,76,"_dependencyMap"],[34,65,5,76],[35,2,5,76],[35,6,5,76,"AppState"],[35,14,5,76],[35,17,5,76,"_interopDefault"],[35,32,5,76],[35,33,5,76,"_reactNativeWebDistExportsAppState"],[35,67,5,76],[36,2,22,7],[36,11,22,16,"useCompass"],[36,21,22,26,"useCompass"],[36,22,22,26],[36,24,22,29],[37,4,23,2],[37,10,23,8],[37,11,23,9,"compassData"],[37,22,23,20],[37,24,23,22,"setCompassData"],[37,38,23,36],[37,39,23,37],[37,42,23,40],[37,46,23,40,"useState"],[37,52,23,48],[37,53,23,48,"useState"],[37,61,23,48],[37,63,23,62],[38,6,24,4,"heading"],[38,13,24,11],[38,15,24,13],[38,16,24,14],[39,6,25,4,"userLocation"],[39,18,25,16],[39,20,25,18],[39,24,25,22],[40,6,26,4,"targetLocation"],[40,20,26,18],[40,22,26,20],[40,26,26,24],[41,6,27,4,"bearingData"],[41,17,27,15],[41,19,27,17],[41,23,27,21],[42,6,28,4,"isAligned"],[42,15,28,13],[42,17,28,15],[42,22,28,20],[43,6,29,4,"turnDirection"],[43,19,29,17],[43,21,29,19],[43,25,29,23],[44,6,30,4,"turnAngle"],[44,15,30,13],[44,17,30,15],[44,18,30,16],[45,6,31,4,"distance"],[45,14,31,12],[45,16,31,14],[45,17,31,15],[46,6,32,4,"isLoading"],[46,15,32,13],[46,17,32,15],[46,21,32,19],[47,6,33,4,"error"],[47,11,33,9],[47,13,33,11],[47,17,33,15],[48,6,34,4,"permissionGranted"],[48,23,34,21],[48,25,34,23],[49,4,35,2],[49,5,35,3],[49,6,35,4],[50,4,37,2],[50,10,37,8],[50,11,37,9,"wasAligned"],[50,21,37,19],[50,23,37,21,"setWasAligned"],[50,36,37,34],[50,37,37,35],[50,40,37,38],[50,44,37,38,"useState"],[50,50,37,46],[50,51,37,46,"useState"],[50,59,37,46],[50,61,37,47],[50,66,37,52],[50,67,37,53],[51,4,38,2],[51,10,38,8],[51,11,38,9,"manuallyClosedDarshan"],[51,32,38,30],[51,34,38,32,"setManuallyClosedDarshan"],[51,58,38,56],[51,59,38,57],[51,62,38,60],[51,66,38,60,"useState"],[51,72,38,68],[51,73,38,68,"useState"],[51,81,38,68],[51,83,38,69],[51,88,38,74],[51,89,38,75],[52,4,39,2],[52,10,39,8,"lastHapticTime"],[52,24,39,22],[52,27,39,25],[52,31,39,25,"useRef"],[52,37,39,31],[52,38,39,31,"useRef"],[52,44,39,31],[52,46,39,32],[52,47,39,33],[52,48,39,34],[53,4,40,2],[53,10,40,8,"locationUpdateInterval"],[53,32,40,30],[53,35,40,33],[53,39,40,33,"useRef"],[53,45,40,39],[53,46,40,39,"useRef"],[53,52,40,39],[53,54,40,63],[53,58,40,67],[53,59,40,68],[54,4,41,2],[54,10,41,8,"motionSubscription"],[54,28,41,26],[54,31,41,29],[54,35,41,29,"useRef"],[54,41,41,35],[54,42,41,35,"useRef"],[54,48,41,35],[54,50,41,41],[54,54,41,45],[54,55,41,46],[56,4,43,2],[57,4,44,2],[57,8,44,2,"useEffect"],[57,14,44,11],[57,15,44,11,"useEffect"],[57,24,44,11],[57,26,44,12],[57,32,44,18],[58,6,45,4],[58,10,45,8,"mounted"],[58,17,45,15],[58,20,45,18],[58,24,45,22],[59,6,47,4],[59,12,47,10,"initializeServices"],[59,30,47,28],[59,33,47,31],[59,39,47,31,"initializeServices"],[59,40,47,31],[59,45,47,43],[60,8,48,6],[60,12,48,10],[61,10,49,8],[62,10,50,8],[62,16,50,14,"hasPermission"],[62,29,50,27],[62,32,50,30],[62,38,50,36,"LocationService"],[62,62,50,51],[62,63,50,51,"LocationService"],[62,78,50,51],[62,79,50,52,"requestPermissions"],[62,97,50,70],[62,98,50,71],[62,99,50,72],[63,10,51,8],[63,14,51,12],[63,15,51,13,"mounted"],[63,22,51,20],[63,24,51,22],[64,10,53,8],[64,14,53,12],[64,15,53,13,"hasPermission"],[64,28,53,26],[64,30,53,28],[65,12,54,10,"setCompassData"],[65,26,54,24],[65,27,54,25,"prev"],[65,31,54,29],[65,36,54,34],[66,14,55,12],[66,17,55,15,"prev"],[66,21,55,19],[67,14,56,12,"error"],[67,19,56,17],[67,21,56,19],[67,80,56,78],[68,14,57,12,"isLoading"],[68,23,57,21],[68,25,57,23],[68,30,57,28],[69,14,58,12,"permissionGranted"],[69,31,58,29],[69,33,58,31],[70,12,59,10],[70,13,59,11],[70,14,59,12],[70,15,59,13],[71,12,60,10],[72,10,61,8],[73,10,63,8,"setCompassData"],[73,24,63,22],[73,25,63,23,"prev"],[73,29,63,27],[73,34,63,32],[74,12,63,34],[74,15,63,37,"prev"],[74,19,63,41],[75,12,63,43,"permissionGranted"],[75,29,63,60],[75,31,63,62],[76,10,63,67],[76,11,63,68],[76,12,63,69],[76,13,63,70],[78,10,65,8],[79,10,66,8],[79,16,66,14,"targetLocation"],[79,30,66,28],[79,33,66,31],[79,39,66,37,"SupabaseService"],[79,63,66,52],[79,64,66,52,"SupabaseService"],[79,79,66,52],[79,80,66,53,"getSwamijiLocation"],[79,98,66,71],[79,99,66,72],[79,100,66,73],[80,10,67,8],[80,14,67,12],[80,15,67,13,"mounted"],[80,22,67,20],[80,24,67,22],[81,10,69,8],[81,14,69,12],[81,15,69,13,"targetLocation"],[81,29,69,27],[81,31,69,29],[82,12,70,10],[83,12,71,10],[83,18,71,16,"defaultLocation"],[83,33,71,45],[83,36,71,48],[84,14,72,12,"id"],[84,16,72,14],[84,18,72,16],[84,36,72,34],[85,14,73,12,"latitude"],[85,22,73,20],[85,24,73,22],[85,33,73,31],[86,14,74,12,"longitude"],[86,23,74,21],[86,25,74,23],[86,34,74,32],[87,14,75,12,"address"],[87,21,75,19],[87,23,75,21],[87,48,75,46],[88,14,76,12,"updated_at"],[88,24,76,22],[88,26,76,24],[88,30,76,28,"Date"],[88,34,76,32],[88,35,76,33],[88,36,76,34],[88,37,76,35,"toISOString"],[88,48,76,46],[88,49,76,47],[89,12,77,10],[89,13,77,11],[90,12,78,10,"setCompassData"],[90,26,78,24],[90,27,78,25,"prev"],[90,31,78,29],[90,36,78,34],[91,14,78,36],[91,17,78,39,"prev"],[91,21,78,43],[92,14,78,45,"targetLocation"],[92,28,78,59],[92,30,78,61,"defaultLocation"],[93,12,78,77],[93,13,78,78],[93,14,78,79],[93,15,78,80],[94,10,79,8],[94,11,79,9],[94,17,79,15],[95,12,80,10,"setCompassData"],[95,26,80,24],[95,27,80,25,"prev"],[95,31,80,29],[95,36,80,34],[96,14,80,36],[96,17,80,39,"prev"],[96,21,80,43],[97,14,80,45,"targetLocation"],[98,12,80,60],[98,13,80,61],[98,14,80,62],[98,15,80,63],[99,10,81,8],[101,10,83,8],[102,10,84,8],[102,16,84,14,"userLocation"],[102,28,84,26],[102,31,84,29],[102,37,84,35,"LocationService"],[102,61,84,50],[102,62,84,50,"LocationService"],[102,77,84,50],[102,78,84,51,"getCurrentLocation"],[102,96,84,69],[102,97,84,70],[102,98,84,71],[103,10,85,8],[103,14,85,12],[103,15,85,13,"mounted"],[103,22,85,20],[103,24,85,22],[104,10,87,8],[104,14,87,12,"userLocation"],[104,26,87,24],[104,28,87,26],[105,12,88,10,"setCompassData"],[105,26,88,24],[105,27,88,25,"prev"],[105,31,88,29],[105,36,88,34],[106,14,88,36],[106,17,88,39,"prev"],[106,21,88,43],[107,14,88,45,"userLocation"],[108,12,88,58],[108,13,88,59],[108,14,88,60],[108,15,88,61],[109,10,89,8],[111,10,91,8],[112,10,92,8],[112,16,92,14,"locationStarted"],[112,31,92,29],[112,34,92,32],[112,40,92,38,"LocationService"],[112,64,92,53],[112,65,92,53,"LocationService"],[112,80,92,53],[112,81,92,54,"startWatchingLocation"],[112,102,92,75],[112,103,92,77,"location"],[112,111,92,85],[112,115,92,90],[113,12,93,10],[113,16,93,14],[113,17,93,15,"mounted"],[113,24,93,22],[113,26,93,24],[114,12,94,10,"setCompassData"],[114,26,94,24],[114,27,94,25,"prev"],[114,31,94,29],[114,36,94,34],[115,14,94,36],[115,17,94,39,"prev"],[115,21,94,43],[116,14,94,45,"userLocation"],[116,26,94,57],[116,28,94,59,"location"],[117,12,94,68],[117,13,94,69],[117,14,94,70],[117,15,94,71],[118,10,95,8],[118,11,95,9],[118,12,95,10],[119,10,97,8],[119,14,97,12],[119,15,97,13,"locationStarted"],[119,30,97,28],[119,32,97,30],[120,12,98,10,"setCompassData"],[120,26,98,24],[120,27,98,25,"prev"],[120,31,98,29],[120,36,98,34],[121,14,99,12],[121,17,99,15,"prev"],[121,21,99,19],[122,14,100,12,"error"],[122,19,100,17],[122,21,100,19],[123,12,101,10],[123,13,101,11],[123,14,101,12],[123,15,101,13],[124,10,102,8],[126,10,104,8],[127,10,105,8],[127,16,105,14,"isAvailable"],[127,27,105,25],[127,30,105,28],[127,36,105,34,"Magnetometer"],[127,48,105,46],[127,49,105,46,"Magnetometer"],[127,61,105,46],[127,62,105,47,"isAvailableAsync"],[127,78,105,63],[127,79,105,64],[127,80,105,65],[128,10,106,8],[128,14,106,12,"isAvailable"],[128,25,106,23],[128,27,106,25],[129,12,107,10,"Magnetometer"],[129,24,107,22],[129,25,107,22,"Magnetometer"],[129,37,107,22],[129,38,107,23,"setUpdateInterval"],[129,55,107,40],[129,56,107,41],[129,59,107,44],[129,60,107,45],[129,61,107,46],[129,62,107,47],[130,12,108,10,"motionSubscription"],[130,30,108,28],[130,31,108,29,"current"],[130,38,108,36],[130,41,108,39,"Magnetometer"],[130,53,108,51],[130,54,108,51,"Magnetometer"],[130,66,108,51],[130,67,108,52,"addListener"],[130,78,108,63],[130,79,108,65,"magnetometerData"],[130,95,108,81],[130,99,108,86],[131,14,109,12],[131,18,109,16],[131,19,109,17,"mounted"],[131,26,109,24],[131,28,109,26],[133,14,111,12],[134,14,112,12],[134,20,112,18],[135,16,112,20,"x"],[135,17,112,21],[136,16,112,23,"y"],[137,14,112,25],[137,15,112,26],[137,18,112,29,"magnetometerData"],[137,34,112,45],[138,14,113,12],[138,18,113,16,"heading"],[138,25,113,23],[138,28,113,26,"Math"],[138,32,113,30],[138,33,113,31,"atan2"],[138,38,113,36],[138,39,113,37,"y"],[138,40,113,38],[138,42,113,40,"x"],[138,43,113,41],[138,44,113,42],[138,48,113,46],[138,51,113,49],[138,54,113,52,"Math"],[138,58,113,56],[138,59,113,57,"PI"],[138,61,113,59],[138,62,113,60],[139,14,114,12],[140,14,115,12,"heading"],[140,21,115,19],[140,24,115,22],[140,25,115,23,"heading"],[140,32,115,30],[140,35,115,33],[140,38,115,36],[140,42,115,40],[140,45,115,43],[141,14,116,12,"setCompassData"],[141,28,116,26],[141,29,116,27,"prev"],[141,33,116,31],[141,38,116,36],[142,16,116,38],[142,19,116,41,"prev"],[142,23,116,45],[143,16,116,47,"heading"],[144,14,116,55],[144,15,116,56],[144,16,116,57],[144,17,116,58],[145,12,117,10],[145,13,117,11],[145,14,117,12],[146,10,118,8],[146,11,118,9],[146,17,118,15],[147,12,119,10],[148,12,120,10],[148,16,120,14,"simulatedHeading"],[148,32,120,30],[148,35,120,33],[148,36,120,34],[149,12,121,10],[149,18,121,16,"simulationInterval"],[149,36,121,34],[149,39,121,37,"setInterval"],[149,50,121,48],[149,51,121,49],[149,57,121,55],[150,14,122,12],[150,18,122,16],[150,19,122,17,"mounted"],[150,26,122,24],[150,28,122,26],[151,14,123,12,"simulatedHeading"],[151,30,123,28],[151,33,123,31],[151,34,123,32,"simulatedHeading"],[151,50,123,48],[151,53,123,51],[151,54,123,52],[151,58,123,56],[151,61,123,59],[152,14,124,12,"setCompassData"],[152,28,124,26],[152,29,124,27,"prev"],[152,33,124,31],[152,38,124,36],[153,16,124,38],[153,19,124,41,"prev"],[153,23,124,45],[154,16,124,47,"heading"],[154,23,124,54],[154,25,124,56,"simulatedHeading"],[155,14,124,73],[155,15,124,74],[155,16,124,75],[155,17,124,76],[156,12,125,10],[156,13,125,11],[156,15,125,13],[156,18,125,16],[156,19,125,17],[158,12,127,10],[159,12,128,10,"motionSubscription"],[159,30,128,28],[159,31,128,29,"current"],[159,38,128,36],[159,41,128,39],[160,14,128,41,"remove"],[160,20,128,47],[160,22,128,49,"remove"],[160,23,128,49],[160,28,128,55,"clearInterval"],[160,41,128,68],[160,42,128,69,"simulationInterval"],[160,60,128,87],[161,12,128,89],[161,13,128,90],[162,10,129,8],[163,10,131,8,"setCompassData"],[163,24,131,22],[163,25,131,23,"prev"],[163,29,131,27],[163,34,131,32],[164,12,131,34],[164,15,131,37,"prev"],[164,19,131,41],[165,12,131,43,"isLoading"],[165,21,131,52],[165,23,131,54],[166,10,131,60],[166,11,131,61],[166,12,131,62],[166,13,131,63],[167,8,132,6],[167,9,132,7],[167,10,132,8],[167,17,132,15,"error"],[167,22,132,20],[167,24,132,22],[168,10,133,8],[168,14,133,12],[168,15,133,13,"mounted"],[168,22,133,20],[168,24,133,22],[169,10,134,8,"console"],[169,17,134,15],[169,18,134,16,"error"],[169,23,134,21],[169,24,134,22],[169,62,134,60],[169,64,134,62,"error"],[169,69,134,67],[169,70,134,68],[170,10,135,8,"setCompassData"],[170,24,135,22],[170,25,135,23,"prev"],[170,29,135,27],[170,34,135,32],[171,12,136,10],[171,15,136,13,"prev"],[171,19,136,17],[172,12,137,10,"error"],[172,17,137,15],[172,19,137,17],[172,58,137,56],[173,12,138,10,"isLoading"],[173,21,138,19],[173,23,138,21],[174,10,139,8],[174,11,139,9],[174,12,139,10],[174,13,139,11],[175,8,140,6],[176,6,141,4],[176,7,141,5],[177,6,143,4,"initializeServices"],[177,24,143,22],[177,25,143,23],[177,26,143,24],[179,6,145,4],[180,6,146,4,"locationUpdateInterval"],[180,28,146,26],[180,29,146,27,"current"],[180,36,146,34],[180,39,146,37,"setInterval"],[180,50,146,48],[180,51,146,49],[180,63,146,61],[181,8,147,6],[181,12,147,10],[181,13,147,11,"mounted"],[181,20,147,18],[181,22,147,20],[182,8,148,6],[182,14,148,12,"targetLocation"],[182,28,148,26],[182,31,148,29],[182,37,148,35,"SupabaseService"],[182,61,148,50],[182,62,148,50,"SupabaseService"],[182,77,148,50],[182,78,148,51,"getSwamijiLocation"],[182,96,148,69],[182,97,148,70],[182,98,148,71],[183,8,149,6],[183,12,149,10,"targetLocation"],[183,26,149,24],[183,30,149,28,"mounted"],[183,37,149,35],[183,39,149,37],[184,10,150,8,"setCompassData"],[184,24,150,22],[184,25,150,23,"prev"],[184,29,150,27],[184,34,150,32],[185,12,150,34],[185,15,150,37,"prev"],[185,19,150,41],[186,12,150,43,"targetLocation"],[187,10,150,58],[187,11,150,59],[187,12,150,60],[187,13,150,61],[188,8,151,6],[189,6,152,4],[189,7,152,5],[189,9,152,7],[189,14,152,12],[189,15,152,13],[190,6,154,4],[190,13,154,11],[190,19,154,17],[191,8,155,6,"mounted"],[191,15,155,13],[191,18,155,16],[191,23,155,21],[192,8,156,6,"LocationService"],[192,32,156,21],[192,33,156,21,"LocationService"],[192,48,156,21],[192,49,156,22,"stopWatchingLocation"],[192,69,156,42],[192,70,156,43],[192,71,156,44],[193,8,157,6],[193,12,157,10,"motionSubscription"],[193,30,157,28],[193,31,157,29,"current"],[193,38,157,36],[193,40,157,38],[194,10,158,8,"motionSubscription"],[194,28,158,26],[194,29,158,27,"current"],[194,36,158,34],[194,37,158,35,"remove"],[194,43,158,41],[194,44,158,42],[194,45,158,43],[195,8,159,6],[196,8,160,6],[196,12,160,10,"locationUpdateInterval"],[196,34,160,32],[196,35,160,33,"current"],[196,42,160,40],[196,44,160,42],[197,10,161,8,"clearInterval"],[197,23,161,21],[197,24,161,22,"locationUpdateInterval"],[197,46,161,44],[197,47,161,45,"current"],[197,54,161,52],[197,55,161,53],[198,8,162,6],[199,6,163,4],[199,7,163,5],[200,4,164,2],[200,5,164,3],[200,7,164,5],[200,9,164,7],[200,10,164,8],[202,4,166,2],[203,4,167,2],[203,8,167,2,"useEffect"],[203,14,167,11],[203,15,167,11,"useEffect"],[203,24,167,11],[203,26,167,12],[203,32,167,18],[204,6,168,4],[204,10,168,8],[204,11,168,9,"compassData"],[204,22,168,20],[204,23,168,21,"userLocation"],[204,35,168,33],[204,39,168,37],[204,40,168,38,"compassData"],[204,51,168,49],[204,52,168,50,"targetLocation"],[204,66,168,64],[204,68,168,66],[205,6,170,4],[205,12,170,10,"bearingData"],[205,23,170,21],[205,26,170,24,"LocationService"],[205,50,170,39],[205,51,170,39,"LocationService"],[205,66,170,39],[205,67,170,40,"calculateBearingData"],[205,87,170,60],[205,88,171,6,"compassData"],[205,99,171,17],[205,100,171,18,"userLocation"],[205,112,171,30],[205,114,172,6,"compassData"],[205,125,172,17],[205,126,172,18,"targetLocation"],[205,140,173,4],[205,141,173,5],[206,6,175,4],[206,12,175,10,"isAligned"],[206,21,175,19],[206,24,175,22,"LocationService"],[206,48,175,37],[206,49,175,37,"LocationService"],[206,64,175,37],[206,65,175,38,"isAligned"],[206,74,175,47],[206,75,175,48,"compassData"],[206,86,175,59],[206,87,175,60,"heading"],[206,94,175,67],[206,96,175,69,"bearingData"],[206,107,175,80],[206,108,175,81,"bearing"],[206,115,175,88],[206,117,175,90],[206,119,175,92],[206,120,175,93],[207,6,176,4],[207,12,176,10,"turnInfo"],[207,20,176,18],[207,23,176,21,"LocationService"],[207,47,176,36],[207,48,176,36,"LocationService"],[207,63,176,36],[207,64,176,37,"getTurnDirection"],[207,80,176,53],[207,81,176,54,"compassData"],[207,92,176,65],[207,93,176,66,"heading"],[207,100,176,73],[207,102,176,75,"bearingData"],[207,113,176,86],[207,114,176,87,"bearing"],[207,121,176,94],[207,122,176,95],[208,6,178,4,"setCompassData"],[208,20,178,18],[208,21,178,19,"prev"],[208,25,178,23],[208,30,178,28],[209,8,179,6],[209,11,179,9,"prev"],[209,15,179,13],[210,8,180,6,"bearingData"],[210,19,180,17],[211,8,181,6,"isAligned"],[211,17,181,15],[212,8,182,6,"turnDirection"],[212,21,182,19],[212,23,182,21,"isAligned"],[212,32,182,30],[212,35,182,33],[212,39,182,37],[212,42,182,40,"turnInfo"],[212,50,182,48],[212,51,182,49,"direction"],[212,60,182,58],[213,8,183,6,"turnAngle"],[213,17,183,15],[213,19,183,17,"turnInfo"],[213,27,183,25],[213,28,183,26,"angle"],[213,33,183,31],[214,8,184,6,"distance"],[214,16,184,14],[214,18,184,16,"bearingData"],[214,29,184,27],[214,30,184,28,"distance"],[215,6,185,4],[215,7,185,5],[215,8,185,6],[215,9,185,7],[217,6,187,4],[218,6,188,4],[218,10,188,8,"isAligned"],[218,19,188,17],[218,23,188,21],[218,24,188,22,"wasAligned"],[218,34,188,32],[218,38,188,36],[218,39,188,37,"manuallyClosedDarshan"],[218,60,188,58],[218,62,188,60],[219,8,189,6],[219,14,189,12,"now"],[219,17,189,15],[219,20,189,18,"Date"],[219,24,189,22],[219,25,189,23,"now"],[219,28,189,26],[219,29,189,27],[219,30,189,28],[220,8,190,6],[220,12,190,10,"now"],[220,15,190,13],[220,18,190,16,"lastHapticTime"],[220,32,190,30],[220,33,190,31,"current"],[220,40,190,38],[220,43,190,41],[220,47,190,45],[220,49,190,47],[221,10,190,49],[222,10,191,8,"Haptics"],[222,17,191,15],[222,18,191,16,"notificationAsync"],[222,35,191,33],[222,36,191,34,"Haptics"],[222,43,191,41],[222,44,191,42,"NotificationFeedbackType"],[222,68,191,66],[222,69,191,67,"Success"],[222,76,191,74],[222,77,191,75],[223,10,192,8,"lastHapticTime"],[223,24,192,22],[223,25,192,23,"current"],[223,32,192,30],[223,35,192,33,"now"],[223,38,192,36],[224,8,193,6],[225,8,194,6,"setWasAligned"],[225,21,194,19],[225,22,194,20],[225,26,194,24],[225,27,194,25],[226,6,195,4],[226,7,195,5],[226,13,195,11],[226,17,195,15],[226,18,195,16,"isAligned"],[226,27,195,25],[226,31,195,29,"wasAligned"],[226,41,195,39],[226,43,195,41],[227,8,196,6,"setWasAligned"],[227,21,196,19],[227,22,196,20],[227,27,196,25],[227,28,196,26],[228,6,197,4],[229,4,198,2],[229,5,198,3],[229,7,198,5],[229,8,198,6,"compassData"],[229,19,198,17],[229,20,198,18,"heading"],[229,27,198,25],[229,29,198,27,"compassData"],[229,40,198,38],[229,41,198,39,"userLocation"],[229,53,198,51],[229,55,198,53,"compassData"],[229,66,198,64],[229,67,198,65,"targetLocation"],[229,81,198,79],[229,83,198,81,"wasAligned"],[229,93,198,91],[229,95,198,93,"manuallyClosedDarshan"],[229,116,198,114],[229,117,198,115],[229,118,198,116],[231,4,200,2],[232,4,201,2],[232,8,201,2,"useEffect"],[232,14,201,11],[232,15,201,11,"useEffect"],[232,24,201,11],[232,26,201,12],[232,32,201,18],[233,6,202,4],[233,12,202,10,"handleAppStateChange"],[233,32,202,30],[233,35,202,34,"nextAppState"],[233,47,202,62],[233,51,202,67],[234,8,203,6],[234,12,203,10,"nextAppState"],[234,24,203,22],[234,29,203,27],[234,41,203,39],[234,43,203,41],[235,10,204,8],[236,10,205,8,"LocationService"],[236,34,205,23],[236,35,205,23,"LocationService"],[236,50,205,23],[236,51,205,24,"stopWatchingLocation"],[236,71,205,44],[236,72,205,45],[236,73,205,46],[237,10,206,8],[237,14,206,12,"motionSubscription"],[237,32,206,30],[237,33,206,31,"current"],[237,40,206,38],[237,42,206,40],[238,12,207,10,"motionSubscription"],[238,30,207,28],[238,31,207,29,"current"],[238,38,207,36],[238,39,207,37,"remove"],[238,45,207,43],[238,46,207,44],[238,47,207,45],[239,12,208,10,"motionSubscription"],[239,30,208,28],[239,31,208,29,"current"],[239,38,208,36],[239,41,208,39],[239,45,208,43],[240,10,209,8],[241,8,210,6],[241,9,210,7],[241,15,210,13],[241,19,210,17,"nextAppState"],[241,31,210,29],[241,36,210,34],[241,44,210,42],[241,46,210,44],[242,10,211,8],[243,10,212,8,"LocationService"],[243,34,212,23],[243,35,212,23,"LocationService"],[243,50,212,23],[243,51,212,24,"startWatchingLocation"],[243,72,212,45],[243,73,212,47,"location"],[243,81,212,55],[243,85,212,60],[244,12,213,10,"setCompassData"],[244,26,213,24],[244,27,213,25,"prev"],[244,31,213,29],[244,36,213,34],[245,14,213,36],[245,17,213,39,"prev"],[245,21,213,43],[246,14,213,45,"userLocation"],[246,26,213,57],[246,28,213,59,"location"],[247,12,213,68],[247,13,213,69],[247,14,213,70],[247,15,213,71],[248,10,214,8],[248,11,214,9],[248,12,214,10],[250,10,216,8],[251,10,217,8,"Magnetometer"],[251,22,217,20],[251,23,217,20,"Magnetometer"],[251,35,217,20],[251,36,217,21,"isAvailableAsync"],[251,52,217,37],[251,53,217,38],[251,54,217,39],[251,55,217,40,"then"],[251,59,217,44],[251,60,217,46,"isAvailable"],[251,71,217,57],[251,75,217,62],[252,12,218,10],[252,16,218,14,"isAvailable"],[252,27,218,25],[252,31,218,29],[252,32,218,30,"motionSubscription"],[252,50,218,48],[252,51,218,49,"current"],[252,58,218,56],[252,60,218,58],[253,14,219,12,"motionSubscription"],[253,32,219,30],[253,33,219,31,"current"],[253,40,219,38],[253,43,219,41,"Magnetometer"],[253,55,219,53],[253,56,219,53,"Magnetometer"],[253,68,219,53],[253,69,219,54,"addListener"],[253,80,219,65],[253,81,219,67,"magnetometerData"],[253,97,219,83],[253,101,219,88],[254,16,220,14],[254,22,220,20],[255,18,220,22,"x"],[255,19,220,23],[256,18,220,25,"y"],[257,16,220,27],[257,17,220,28],[257,20,220,31,"magnetometerData"],[257,36,220,47],[258,16,221,14],[258,20,221,18,"heading"],[258,27,221,25],[258,30,221,28,"Math"],[258,34,221,32],[258,35,221,33,"atan2"],[258,40,221,38],[258,41,221,39,"y"],[258,42,221,40],[258,44,221,42,"x"],[258,45,221,43],[258,46,221,44],[258,50,221,48],[258,53,221,51],[258,56,221,54,"Math"],[258,60,221,58],[258,61,221,59,"PI"],[258,63,221,61],[258,64,221,62],[259,16,222,14,"heading"],[259,23,222,21],[259,26,222,24],[259,27,222,25,"heading"],[259,34,222,32],[259,37,222,35],[259,40,222,38],[259,44,222,42],[259,47,222,45],[260,16,223,14,"setCompassData"],[260,30,223,28],[260,31,223,29,"prev"],[260,35,223,33],[260,40,223,38],[261,18,223,40],[261,21,223,43,"prev"],[261,25,223,47],[262,18,223,49,"heading"],[263,16,223,57],[263,17,223,58],[263,18,223,59],[263,19,223,60],[264,14,224,12],[264,15,224,13],[264,16,224,14],[265,12,225,10],[266,10,226,8],[266,11,226,9],[266,12,226,10],[267,8,227,6],[268,6,228,4],[268,7,228,5],[269,6,230,4],[269,12,230,10,"subscription"],[269,24,230,22],[269,27,230,25,"AppState"],[269,35,230,33],[269,36,230,33,"default"],[269,43,230,33],[269,44,230,34,"addEventListener"],[269,60,230,50],[269,61,230,51],[269,69,230,59],[269,71,230,61,"handleAppStateChange"],[269,91,230,81],[269,92,230,82],[270,6,231,4],[270,13,231,11],[270,19,231,17,"subscription"],[270,31,231,29],[270,33,231,31,"remove"],[270,39,231,37],[270,40,231,38],[270,41,231,39],[271,4,232,2],[271,5,232,3],[271,7,232,5],[271,9,232,7],[271,10,232,8],[273,4,234,2],[274,4,235,2],[274,10,235,8,"closeDarshan"],[274,22,235,20],[274,25,235,23,"closeDarshan"],[274,26,235,23],[274,31,235,29],[275,6,236,4,"setManuallyClosedDarshan"],[275,30,236,28],[275,31,236,29],[275,35,236,33],[275,36,236,34],[276,6,237,4,"setWasAligned"],[276,19,237,17],[276,20,237,18],[276,25,237,23],[276,26,237,24],[277,4,238,2],[277,5,238,3],[278,4,240,2],[278,10,240,8,"resetDarshanState"],[278,27,240,25],[278,30,240,28,"resetDarshanState"],[278,31,240,28],[278,36,240,34],[279,6,241,4,"setManuallyClosedDarshan"],[279,30,241,28],[279,31,241,29],[279,36,241,34],[279,37,241,35],[280,6,242,4,"setWasAligned"],[280,19,242,17],[280,20,242,18],[280,25,242,23],[280,26,242,24],[281,4,243,2],[281,5,243,3],[283,4,245,2],[284,4,246,2],[284,10,246,8,"shouldShowDarshan"],[284,27,246,25],[284,30,246,28,"compassData"],[284,41,246,39],[284,42,246,40,"isAligned"],[284,51,246,49],[284,55,246,53],[284,56,246,54,"manuallyClosedDarshan"],[284,77,246,75],[285,4,248,2],[285,11,248,9],[286,6,249,4],[286,9,249,7,"compassData"],[286,20,249,18],[287,6,250,4,"shouldShowDarshan"],[287,23,250,21],[288,6,251,4,"closeDarshan"],[288,18,251,16],[289,6,252,4,"resetDarshanState"],[290,4,253,2],[290,5,253,3],[291,2,254,0],[292,0,254,1],[292,3]],"functionMap":{"names":["<global>","useCompass","useEffect$argument_0","initializeServices","setCompassData$argument_0","LocationService.startWatchingLocation$argument_0","Magnetometer.addListener$argument_0","setInterval$argument_0","motionSubscription.current.remove","<anonymous>","handleAppStateChange","Magnetometer.isAvailableAsync.then$argument_0","closeDarshan","resetDarshanState"],"mappings":"AAA;OCqB;YCsB;+BCG;yBCO;YDK;uBCI,8CD;yBCe,sDD;yBCE,qCD;yBCQ,mCD;4EEI;yBDE,6CC;SFC;yBCG;YDG;gEGO;2BFQ,8BE;WHC;iDII;2BHG,gDG;WJC;iDKG,uCL;uBCG,uCD;uBCI;UDI;KDE;iDKK;uBHI,qCG;KLE;WOE;KPS;GDC;YCG;mBEW;MFO;GDa;YCG;iCQC;8CLU;yBDC,6CC;SKC;6CCG;kELE;6BFI,8BE;aKC;SDE;KRE;WOG,4BP;GDC;uBWG;GXG;4BYE;GZG"},"hasCjsExports":false},"type":"js/module"}]}