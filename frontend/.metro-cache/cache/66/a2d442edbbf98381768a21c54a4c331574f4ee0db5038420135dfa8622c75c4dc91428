{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":52,"index":52}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"expo-sensors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":53},"end":{"line":2,"column":44,"index":97}}],"key":"BFOmcY3heoZY/RSSPg5xbOpveWQ=","exportNames":["*"],"imports":1}},{"name":"expo-haptics","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":98},"end":{"line":3,"column":40,"index":138}}],"key":"XxdHVlyuI491+26LeQ/AtfIvhac=","exportNames":["*"],"imports":1}},{"name":"../services/locationService","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":139},"end":{"line":4,"column":89,"index":228}}],"key":"I9192BMih11C1JeQ/D4NvvvO+Yw=","exportNames":["*"],"imports":1}},{"name":"../services/supabaseService","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":229},"end":{"line":5,"column":76,"index":305}}],"key":"S7aIFJ3C9gVBZ6jVd0JtOpUan6k=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/AppState","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"JfCM6WRyn2619+pzBJhEHd1+SSw=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _s = $RefreshSig$();\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.useCompass = useCompass;\n  var _react = require(_dependencyMap[0], \"react\");\n  var _expoSensors = require(_dependencyMap[1], \"expo-sensors\");\n  var _expoHaptics = require(_dependencyMap[2], \"expo-haptics\");\n  var Haptics = _interopNamespace(_expoHaptics);\n  var _servicesLocationService = require(_dependencyMap[3], \"../services/locationService\");\n  var _servicesSupabaseService = require(_dependencyMap[4], \"../services/supabaseService\");\n  var _reactNativeWebDistExportsAppState = require(_dependencyMap[5], \"react-native-web/dist/exports/AppState\");\n  var AppState = _interopDefault(_reactNativeWebDistExportsAppState);\n  function useCompass() {\n    _s();\n    const [compassData, setCompassData] = (0, _react.useState)({\n      heading: 0,\n      userLocation: null,\n      targetLocation: null,\n      bearingData: null,\n      isAligned: false,\n      turnDirection: null,\n      turnAngle: 0,\n      distance: 0,\n      isLoading: true,\n      error: null,\n      permissionGranted: false\n    });\n    const [wasAligned, setWasAligned] = (0, _react.useState)(false);\n    const [manuallyClosedDarshan, setManuallyClosedDarshan] = (0, _react.useState)(false);\n    const lastHapticTime = (0, _react.useRef)(0);\n    const locationUpdateInterval = (0, _react.useRef)(null);\n    const motionSubscription = (0, _react.useRef)(null);\n\n    // Initialize compass and location services\n    (0, _react.useEffect)(() => {\n      let mounted = true;\n      const initializeServices = async () => {\n        try {\n          // Request location permissions\n          const hasPermission = await _servicesLocationService.LocationService.requestPermissions();\n          if (!mounted) return;\n          if (!hasPermission) {\n            setCompassData(prev => Object.assign({}, prev, {\n              error: 'Location permission is required for compass functionality',\n              isLoading: false,\n              permissionGranted: false\n            }));\n            return;\n          }\n          setCompassData(prev => Object.assign({}, prev, {\n            permissionGranted: true\n          }));\n\n          // Get initial target location from Supabase\n          const targetLocation = await _servicesSupabaseService.SupabaseService.getSwamijiLocation();\n          if (!mounted) return;\n          if (!targetLocation) {\n            // Use default location if not found in database\n            const defaultLocation = {\n              id: 'swamiji_location',\n              latitude: 12.308367,\n              longitude: 76.645467,\n              address: 'Avadhoota Datta Peetham',\n              updated_at: new Date().toISOString()\n            };\n            setCompassData(prev => Object.assign({}, prev, {\n              targetLocation: defaultLocation\n            }));\n          } else {\n            setCompassData(prev => Object.assign({}, prev, {\n              targetLocation\n            }));\n          }\n\n          // Get initial user location\n          const userLocation = await _servicesLocationService.LocationService.getCurrentLocation();\n          if (!mounted) return;\n          if (userLocation) {\n            setCompassData(prev => Object.assign({}, prev, {\n              userLocation\n            }));\n          }\n\n          // Start location updates\n          const locationStarted = await _servicesLocationService.LocationService.startWatchingLocation(location => {\n            if (!mounted) return;\n            setCompassData(prev => Object.assign({}, prev, {\n              userLocation: location\n            }));\n          });\n          if (!locationStarted) {\n            setCompassData(prev => Object.assign({}, prev, {\n              error: 'Failed to start location tracking'\n            }));\n          }\n\n          // Start magnetometer (compass) updates\n          const isAvailable = await _expoSensors.Magnetometer.isAvailableAsync();\n          if (isAvailable) {\n            _expoSensors.Magnetometer.setUpdateInterval(100); // Update every 100ms\n            motionSubscription.current = _expoSensors.Magnetometer.addListener(magnetometerData => {\n              if (!mounted) return;\n\n              // Calculate heading from magnetometer data\n              const {\n                x,\n                y\n              } = magnetometerData;\n              let heading = Math.atan2(y, x) * (180 / Math.PI);\n              // Normalize to 0-360 degrees\n              heading = (heading + 360) % 360;\n              setCompassData(prev => Object.assign({}, prev, {\n                heading\n              }));\n            });\n          } else {\n            // Fallback: simulate compass for testing (slowly rotating)\n            let simulatedHeading = 0;\n            const simulationInterval = setInterval(() => {\n              if (!mounted) return;\n              simulatedHeading = (simulatedHeading + 1) % 360;\n              setCompassData(prev => Object.assign({}, prev, {\n                heading: simulatedHeading\n              }));\n            }, 100);\n\n            // Store interval for cleanup\n            motionSubscription.current = {\n              remove: () => clearInterval(simulationInterval)\n            };\n          }\n          setCompassData(prev => Object.assign({}, prev, {\n            isLoading: false\n          }));\n        } catch (error) {\n          if (!mounted) return;\n          console.error('Error initializing compass services:', error);\n          setCompassData(prev => Object.assign({}, prev, {\n            error: 'Failed to initialize compass services',\n            isLoading: false\n          }));\n        }\n      };\n      initializeServices();\n\n      // Set up periodic target location updates (every 30 seconds)\n      locationUpdateInterval.current = setInterval(async () => {\n        if (!mounted) return;\n        const targetLocation = await _servicesSupabaseService.SupabaseService.getSwamijiLocation();\n        if (targetLocation && mounted) {\n          setCompassData(prev => Object.assign({}, prev, {\n            targetLocation\n          }));\n        }\n      }, 30000);\n      return () => {\n        mounted = false;\n        _servicesLocationService.LocationService.stopWatchingLocation();\n        if (motionSubscription.current) {\n          motionSubscription.current.remove();\n        }\n        if (locationUpdateInterval.current) {\n          clearInterval(locationUpdateInterval.current);\n        }\n      };\n    }, []);\n\n    // Calculate bearing and alignment when location or heading changes\n    (0, _react.useEffect)(() => {\n      if (!compassData.userLocation || !compassData.targetLocation) return;\n      const bearingData = _servicesLocationService.LocationService.calculateBearingData(compassData.userLocation, compassData.targetLocation);\n      const isAligned = _servicesLocationService.LocationService.isAligned(compassData.heading, bearingData.bearing, 20);\n      const turnInfo = _servicesLocationService.LocationService.getTurnDirection(compassData.heading, bearingData.bearing);\n      setCompassData(prev => Object.assign({}, prev, {\n        bearingData,\n        isAligned,\n        turnDirection: isAligned ? null : turnInfo.direction,\n        turnAngle: turnInfo.angle,\n        distance: bearingData.distance\n      }));\n\n      // Handle haptic feedback for alignment\n      if (isAligned && !wasAligned && !manuallyClosedDarshan) {\n        const now = Date.now();\n        if (now - lastHapticTime.current > 2000) {\n          // Prevent too frequent haptics\n          Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);\n          lastHapticTime.current = now;\n        }\n        setWasAligned(true);\n      } else if (!isAligned && wasAligned) {\n        setWasAligned(false);\n      }\n    }, [compassData.heading, compassData.userLocation, compassData.targetLocation, wasAligned, manuallyClosedDarshan]);\n\n    // Handle app state changes (pause/resume)\n    (0, _react.useEffect)(() => {\n      const handleAppStateChange = nextAppState => {\n        if (nextAppState === 'background') {\n          // Pause location updates to save battery\n          _servicesLocationService.LocationService.stopWatchingLocation();\n          if (motionSubscription.current) {\n            motionSubscription.current.remove();\n            motionSubscription.current = null;\n          }\n        } else if (nextAppState === 'active') {\n          // Resume location updates\n          _servicesLocationService.LocationService.startWatchingLocation(location => {\n            setCompassData(prev => Object.assign({}, prev, {\n              userLocation: location\n            }));\n          });\n\n          // Resume magnetometer updates\n          _expoSensors.Magnetometer.isAvailableAsync().then(isAvailable => {\n            if (isAvailable && !motionSubscription.current) {\n              motionSubscription.current = _expoSensors.Magnetometer.addListener(magnetometerData => {\n                const {\n                  x,\n                  y\n                } = magnetometerData;\n                let heading = Math.atan2(y, x) * (180 / Math.PI);\n                heading = (heading + 360) % 360;\n                setCompassData(prev => Object.assign({}, prev, {\n                  heading\n                }));\n              });\n            }\n          });\n        }\n      };\n      const subscription = AppState.default.addEventListener('change', handleAppStateChange);\n      return () => subscription?.remove();\n    }, []);\n\n    // Methods for darshan management\n    const closeDarshan = () => {\n      setManuallyClosedDarshan(true);\n      setWasAligned(false);\n    };\n    const resetDarshanState = () => {\n      setManuallyClosedDarshan(false);\n      setWasAligned(false);\n    };\n\n    // Check if darshan should be shown\n    const shouldShowDarshan = compassData.isAligned && !manuallyClosedDarshan;\n    return Object.assign({}, compassData, {\n      shouldShowDarshan,\n      closeDarshan,\n      resetDarshanState\n    });\n  }\n  _s(useCompass, \"xpZSFgwNbLqS7+d1+sxt9s9V4uE=\");\n});","lineCount":279,"map":[[28,2,22,0,"exports"],[28,9,22,0],[28,10,22,0,"useCompass"],[28,20,22,0],[28,23,22,0,"useCompass"],[28,33,22,0],[29,2,1,0],[29,6,1,0,"_react"],[29,12,1,0],[29,15,1,0,"require"],[29,22,1,0],[29,23,1,0,"_dependencyMap"],[29,37,1,0],[30,2,2,0],[30,6,2,0,"_expoSensors"],[30,18,2,0],[30,21,2,0,"require"],[30,28,2,0],[30,29,2,0,"_dependencyMap"],[30,43,2,0],[31,2,3,0],[31,6,3,0,"_expoHaptics"],[31,18,3,0],[31,21,3,0,"require"],[31,28,3,0],[31,29,3,0,"_dependencyMap"],[31,43,3,0],[32,2,3,0],[32,6,3,0,"Haptics"],[32,13,3,0],[32,16,3,0,"_interopNamespace"],[32,33,3,0],[32,34,3,0,"_expoHaptics"],[32,46,3,0],[33,2,4,0],[33,6,4,0,"_servicesLocationService"],[33,30,4,0],[33,33,4,0,"require"],[33,40,4,0],[33,41,4,0,"_dependencyMap"],[33,55,4,0],[34,2,5,0],[34,6,5,0,"_servicesSupabaseService"],[34,30,5,0],[34,33,5,0,"require"],[34,40,5,0],[34,41,5,0,"_dependencyMap"],[34,55,5,0],[35,2,5,76],[35,6,5,76,"_reactNativeWebDistExportsAppState"],[35,40,5,76],[35,43,5,76,"require"],[35,50,5,76],[35,51,5,76,"_dependencyMap"],[35,65,5,76],[36,2,5,76],[36,6,5,76,"AppState"],[36,14,5,76],[36,17,5,76,"_interopDefault"],[36,32,5,76],[36,33,5,76,"_reactNativeWebDistExportsAppState"],[36,67,5,76],[37,2,22,7],[37,11,22,16,"useCompass"],[37,21,22,26,"useCompass"],[37,22,22,26],[37,24,22,29],[38,4,22,29,"_s"],[38,6,22,29],[39,4,23,2],[39,10,23,8],[39,11,23,9,"compassData"],[39,22,23,20],[39,24,23,22,"setCompassData"],[39,38,23,36],[39,39,23,37],[39,42,23,40],[39,46,23,40,"useState"],[39,52,23,48],[39,53,23,48,"useState"],[39,61,23,48],[39,63,23,62],[40,6,24,4,"heading"],[40,13,24,11],[40,15,24,13],[40,16,24,14],[41,6,25,4,"userLocation"],[41,18,25,16],[41,20,25,18],[41,24,25,22],[42,6,26,4,"targetLocation"],[42,20,26,18],[42,22,26,20],[42,26,26,24],[43,6,27,4,"bearingData"],[43,17,27,15],[43,19,27,17],[43,23,27,21],[44,6,28,4,"isAligned"],[44,15,28,13],[44,17,28,15],[44,22,28,20],[45,6,29,4,"turnDirection"],[45,19,29,17],[45,21,29,19],[45,25,29,23],[46,6,30,4,"turnAngle"],[46,15,30,13],[46,17,30,15],[46,18,30,16],[47,6,31,4,"distance"],[47,14,31,12],[47,16,31,14],[47,17,31,15],[48,6,32,4,"isLoading"],[48,15,32,13],[48,17,32,15],[48,21,32,19],[49,6,33,4,"error"],[49,11,33,9],[49,13,33,11],[49,17,33,15],[50,6,34,4,"permissionGranted"],[50,23,34,21],[50,25,34,23],[51,4,35,2],[51,5,35,3],[51,6,35,4],[52,4,37,2],[52,10,37,8],[52,11,37,9,"wasAligned"],[52,21,37,19],[52,23,37,21,"setWasAligned"],[52,36,37,34],[52,37,37,35],[52,40,37,38],[52,44,37,38,"useState"],[52,50,37,46],[52,51,37,46,"useState"],[52,59,37,46],[52,61,37,47],[52,66,37,52],[52,67,37,53],[53,4,38,2],[53,10,38,8],[53,11,38,9,"manuallyClosedDarshan"],[53,32,38,30],[53,34,38,32,"setManuallyClosedDarshan"],[53,58,38,56],[53,59,38,57],[53,62,38,60],[53,66,38,60,"useState"],[53,72,38,68],[53,73,38,68,"useState"],[53,81,38,68],[53,83,38,69],[53,88,38,74],[53,89,38,75],[54,4,39,2],[54,10,39,8,"lastHapticTime"],[54,24,39,22],[54,27,39,25],[54,31,39,25,"useRef"],[54,37,39,31],[54,38,39,31,"useRef"],[54,44,39,31],[54,46,39,32],[54,47,39,33],[54,48,39,34],[55,4,40,2],[55,10,40,8,"locationUpdateInterval"],[55,32,40,30],[55,35,40,33],[55,39,40,33,"useRef"],[55,45,40,39],[55,46,40,39,"useRef"],[55,52,40,39],[55,54,40,63],[55,58,40,67],[55,59,40,68],[56,4,41,2],[56,10,41,8,"motionSubscription"],[56,28,41,26],[56,31,41,29],[56,35,41,29,"useRef"],[56,41,41,35],[56,42,41,35,"useRef"],[56,48,41,35],[56,50,41,41],[56,54,41,45],[56,55,41,46],[58,4,43,2],[59,4,44,2],[59,8,44,2,"useEffect"],[59,14,44,11],[59,15,44,11,"useEffect"],[59,24,44,11],[59,26,44,12],[59,32,44,18],[60,6,45,4],[60,10,45,8,"mounted"],[60,17,45,15],[60,20,45,18],[60,24,45,22],[61,6,47,4],[61,12,47,10,"initializeServices"],[61,30,47,28],[61,33,47,31],[61,39,47,31,"initializeServices"],[61,40,47,31],[61,45,47,43],[62,8,48,6],[62,12,48,10],[63,10,49,8],[64,10,50,8],[64,16,50,14,"hasPermission"],[64,29,50,27],[64,32,50,30],[64,38,50,36,"LocationService"],[64,62,50,51],[64,63,50,51,"LocationService"],[64,78,50,51],[64,79,50,52,"requestPermissions"],[64,97,50,70],[64,98,50,71],[64,99,50,72],[65,10,51,8],[65,14,51,12],[65,15,51,13,"mounted"],[65,22,51,20],[65,24,51,22],[66,10,53,8],[66,14,53,12],[66,15,53,13,"hasPermission"],[66,28,53,26],[66,30,53,28],[67,12,54,10,"setCompassData"],[67,26,54,24],[67,27,54,25,"prev"],[67,31,54,29],[67,35,54,29,"Object"],[67,41,54,29],[67,42,54,29,"assign"],[67,48,54,29],[67,53,55,15,"prev"],[67,57,55,19],[68,14,56,12,"error"],[68,19,56,17],[68,21,56,19],[68,80,56,78],[69,14,57,12,"isLoading"],[69,23,57,21],[69,25,57,23],[69,30,57,28],[70,14,58,12,"permissionGranted"],[70,31,58,29],[70,33,58,31],[71,12,58,36],[71,14,59,12],[71,15,59,13],[72,12,60,10],[73,10,61,8],[74,10,63,8,"setCompassData"],[74,24,63,22],[74,25,63,23,"prev"],[74,29,63,27],[74,33,63,27,"Object"],[74,39,63,27],[74,40,63,27,"assign"],[74,46,63,27],[74,51,63,37,"prev"],[74,55,63,41],[75,12,63,43,"permissionGranted"],[75,29,63,60],[75,31,63,62],[76,10,63,66],[76,12,63,69],[76,13,63,70],[78,10,65,8],[79,10,66,8],[79,16,66,14,"targetLocation"],[79,30,66,28],[79,33,66,31],[79,39,66,37,"SupabaseService"],[79,63,66,52],[79,64,66,52,"SupabaseService"],[79,79,66,52],[79,80,66,53,"getSwamijiLocation"],[79,98,66,71],[79,99,66,72],[79,100,66,73],[80,10,67,8],[80,14,67,12],[80,15,67,13,"mounted"],[80,22,67,20],[80,24,67,22],[81,10,69,8],[81,14,69,12],[81,15,69,13,"targetLocation"],[81,29,69,27],[81,31,69,29],[82,12,70,10],[83,12,71,10],[83,18,71,16,"defaultLocation"],[83,33,71,45],[83,36,71,48],[84,14,72,12,"id"],[84,16,72,14],[84,18,72,16],[84,36,72,34],[85,14,73,12,"latitude"],[85,22,73,20],[85,24,73,22],[85,33,73,31],[86,14,74,12,"longitude"],[86,23,74,21],[86,25,74,23],[86,34,74,32],[87,14,75,12,"address"],[87,21,75,19],[87,23,75,21],[87,48,75,46],[88,14,76,12,"updated_at"],[88,24,76,22],[88,26,76,24],[88,30,76,28,"Date"],[88,34,76,32],[88,35,76,33],[88,36,76,34],[88,37,76,35,"toISOString"],[88,48,76,46],[88,49,76,47],[89,12,77,10],[89,13,77,11],[90,12,78,10,"setCompassData"],[90,26,78,24],[90,27,78,25,"prev"],[90,31,78,29],[90,35,78,29,"Object"],[90,41,78,29],[90,42,78,29,"assign"],[90,48,78,29],[90,53,78,39,"prev"],[90,57,78,43],[91,14,78,45,"targetLocation"],[91,28,78,59],[91,30,78,61,"defaultLocation"],[92,12,78,76],[92,14,78,79],[92,15,78,80],[93,10,79,8],[93,11,79,9],[93,17,79,15],[94,12,80,10,"setCompassData"],[94,26,80,24],[94,27,80,25,"prev"],[94,31,80,29],[94,35,80,29,"Object"],[94,41,80,29],[94,42,80,29,"assign"],[94,48,80,29],[94,53,80,39,"prev"],[94,57,80,43],[95,14,80,45,"targetLocation"],[96,12,80,59],[96,14,80,62],[96,15,80,63],[97,10,81,8],[99,10,83,8],[100,10,84,8],[100,16,84,14,"userLocation"],[100,28,84,26],[100,31,84,29],[100,37,84,35,"LocationService"],[100,61,84,50],[100,62,84,50,"LocationService"],[100,77,84,50],[100,78,84,51,"getCurrentLocation"],[100,96,84,69],[100,97,84,70],[100,98,84,71],[101,10,85,8],[101,14,85,12],[101,15,85,13,"mounted"],[101,22,85,20],[101,24,85,22],[102,10,87,8],[102,14,87,12,"userLocation"],[102,26,87,24],[102,28,87,26],[103,12,88,10,"setCompassData"],[103,26,88,24],[103,27,88,25,"prev"],[103,31,88,29],[103,35,88,29,"Object"],[103,41,88,29],[103,42,88,29,"assign"],[103,48,88,29],[103,53,88,39,"prev"],[103,57,88,43],[104,14,88,45,"userLocation"],[105,12,88,57],[105,14,88,60],[105,15,88,61],[106,10,89,8],[108,10,91,8],[109,10,92,8],[109,16,92,14,"locationStarted"],[109,31,92,29],[109,34,92,32],[109,40,92,38,"LocationService"],[109,64,92,53],[109,65,92,53,"LocationService"],[109,80,92,53],[109,81,92,54,"startWatchingLocation"],[109,102,92,75],[109,103,92,77,"location"],[109,111,92,85],[109,115,92,90],[110,12,93,10],[110,16,93,14],[110,17,93,15,"mounted"],[110,24,93,22],[110,26,93,24],[111,12,94,10,"setCompassData"],[111,26,94,24],[111,27,94,25,"prev"],[111,31,94,29],[111,35,94,29,"Object"],[111,41,94,29],[111,42,94,29,"assign"],[111,48,94,29],[111,53,94,39,"prev"],[111,57,94,43],[112,14,94,45,"userLocation"],[112,26,94,57],[112,28,94,59,"location"],[113,12,94,67],[113,14,94,70],[113,15,94,71],[114,10,95,8],[114,11,95,9],[114,12,95,10],[115,10,97,8],[115,14,97,12],[115,15,97,13,"locationStarted"],[115,30,97,28],[115,32,97,30],[116,12,98,10,"setCompassData"],[116,26,98,24],[116,27,98,25,"prev"],[116,31,98,29],[116,35,98,29,"Object"],[116,41,98,29],[116,42,98,29,"assign"],[116,48,98,29],[116,53,99,15,"prev"],[116,57,99,19],[117,14,100,12,"error"],[117,19,100,17],[117,21,100,19],[118,12,100,54],[118,14,101,12],[118,15,101,13],[119,10,102,8],[121,10,104,8],[122,10,105,8],[122,16,105,14,"isAvailable"],[122,27,105,25],[122,30,105,28],[122,36,105,34,"Magnetometer"],[122,48,105,46],[122,49,105,46,"Magnetometer"],[122,61,105,46],[122,62,105,47,"isAvailableAsync"],[122,78,105,63],[122,79,105,64],[122,80,105,65],[123,10,106,8],[123,14,106,12,"isAvailable"],[123,25,106,23],[123,27,106,25],[124,12,107,10,"Magnetometer"],[124,24,107,22],[124,25,107,22,"Magnetometer"],[124,37,107,22],[124,38,107,23,"setUpdateInterval"],[124,55,107,40],[124,56,107,41],[124,59,107,44],[124,60,107,45],[124,61,107,46],[124,62,107,47],[125,12,108,10,"motionSubscription"],[125,30,108,28],[125,31,108,29,"current"],[125,38,108,36],[125,41,108,39,"Magnetometer"],[125,53,108,51],[125,54,108,51,"Magnetometer"],[125,66,108,51],[125,67,108,52,"addListener"],[125,78,108,63],[125,79,108,65,"magnetometerData"],[125,95,108,81],[125,99,108,86],[126,14,109,12],[126,18,109,16],[126,19,109,17,"mounted"],[126,26,109,24],[126,28,109,26],[128,14,111,12],[129,14,112,12],[129,20,112,18],[130,16,112,20,"x"],[130,17,112,21],[131,16,112,23,"y"],[132,14,112,25],[132,15,112,26],[132,18,112,29,"magnetometerData"],[132,34,112,45],[133,14,113,12],[133,18,113,16,"heading"],[133,25,113,23],[133,28,113,26,"Math"],[133,32,113,30],[133,33,113,31,"atan2"],[133,38,113,36],[133,39,113,37,"y"],[133,40,113,38],[133,42,113,40,"x"],[133,43,113,41],[133,44,113,42],[133,48,113,46],[133,51,113,49],[133,54,113,52,"Math"],[133,58,113,56],[133,59,113,57,"PI"],[133,61,113,59],[133,62,113,60],[134,14,114,12],[135,14,115,12,"heading"],[135,21,115,19],[135,24,115,22],[135,25,115,23,"heading"],[135,32,115,30],[135,35,115,33],[135,38,115,36],[135,42,115,40],[135,45,115,43],[136,14,116,12,"setCompassData"],[136,28,116,26],[136,29,116,27,"prev"],[136,33,116,31],[136,37,116,31,"Object"],[136,43,116,31],[136,44,116,31,"assign"],[136,50,116,31],[136,55,116,41,"prev"],[136,59,116,45],[137,16,116,47,"heading"],[138,14,116,54],[138,16,116,57],[138,17,116,58],[139,12,117,10],[139,13,117,11],[139,14,117,12],[140,10,118,8],[140,11,118,9],[140,17,118,15],[141,12,119,10],[142,12,120,10],[142,16,120,14,"simulatedHeading"],[142,32,120,30],[142,35,120,33],[142,36,120,34],[143,12,121,10],[143,18,121,16,"simulationInterval"],[143,36,121,34],[143,39,121,37,"setInterval"],[143,50,121,48],[143,51,121,49],[143,57,121,55],[144,14,122,12],[144,18,122,16],[144,19,122,17,"mounted"],[144,26,122,24],[144,28,122,26],[145,14,123,12,"simulatedHeading"],[145,30,123,28],[145,33,123,31],[145,34,123,32,"simulatedHeading"],[145,50,123,48],[145,53,123,51],[145,54,123,52],[145,58,123,56],[145,61,123,59],[146,14,124,12,"setCompassData"],[146,28,124,26],[146,29,124,27,"prev"],[146,33,124,31],[146,37,124,31,"Object"],[146,43,124,31],[146,44,124,31,"assign"],[146,50,124,31],[146,55,124,41,"prev"],[146,59,124,45],[147,16,124,47,"heading"],[147,23,124,54],[147,25,124,56,"simulatedHeading"],[148,14,124,72],[148,16,124,75],[148,17,124,76],[149,12,125,10],[149,13,125,11],[149,15,125,13],[149,18,125,16],[149,19,125,17],[151,12,127,10],[152,12,128,10,"motionSubscription"],[152,30,128,28],[152,31,128,29,"current"],[152,38,128,36],[152,41,128,39],[153,14,128,41,"remove"],[153,20,128,47],[153,22,128,49,"remove"],[153,23,128,49],[153,28,128,55,"clearInterval"],[153,41,128,68],[153,42,128,69,"simulationInterval"],[153,60,128,87],[154,12,128,89],[154,13,128,90],[155,10,129,8],[156,10,131,8,"setCompassData"],[156,24,131,22],[156,25,131,23,"prev"],[156,29,131,27],[156,33,131,27,"Object"],[156,39,131,27],[156,40,131,27,"assign"],[156,46,131,27],[156,51,131,37,"prev"],[156,55,131,41],[157,12,131,43,"isLoading"],[157,21,131,52],[157,23,131,54],[158,10,131,59],[158,12,131,62],[158,13,131,63],[159,8,132,6],[159,9,132,7],[159,10,132,8],[159,17,132,15,"error"],[159,22,132,20],[159,24,132,22],[160,10,133,8],[160,14,133,12],[160,15,133,13,"mounted"],[160,22,133,20],[160,24,133,22],[161,10,134,8,"console"],[161,17,134,15],[161,18,134,16,"error"],[161,23,134,21],[161,24,134,22],[161,62,134,60],[161,64,134,62,"error"],[161,69,134,67],[161,70,134,68],[162,10,135,8,"setCompassData"],[162,24,135,22],[162,25,135,23,"prev"],[162,29,135,27],[162,33,135,27,"Object"],[162,39,135,27],[162,40,135,27,"assign"],[162,46,135,27],[162,51,136,13,"prev"],[162,55,136,17],[163,12,137,10,"error"],[163,17,137,15],[163,19,137,17],[163,58,137,56],[164,12,138,10,"isLoading"],[164,21,138,19],[164,23,138,21],[165,10,138,26],[165,12,139,10],[165,13,139,11],[166,8,140,6],[167,6,141,4],[167,7,141,5],[168,6,143,4,"initializeServices"],[168,24,143,22],[168,25,143,23],[168,26,143,24],[170,6,145,4],[171,6,146,4,"locationUpdateInterval"],[171,28,146,26],[171,29,146,27,"current"],[171,36,146,34],[171,39,146,37,"setInterval"],[171,50,146,48],[171,51,146,49],[171,63,146,61],[172,8,147,6],[172,12,147,10],[172,13,147,11,"mounted"],[172,20,147,18],[172,22,147,20],[173,8,148,6],[173,14,148,12,"targetLocation"],[173,28,148,26],[173,31,148,29],[173,37,148,35,"SupabaseService"],[173,61,148,50],[173,62,148,50,"SupabaseService"],[173,77,148,50],[173,78,148,51,"getSwamijiLocation"],[173,96,148,69],[173,97,148,70],[173,98,148,71],[174,8,149,6],[174,12,149,10,"targetLocation"],[174,26,149,24],[174,30,149,28,"mounted"],[174,37,149,35],[174,39,149,37],[175,10,150,8,"setCompassData"],[175,24,150,22],[175,25,150,23,"prev"],[175,29,150,27],[175,33,150,27,"Object"],[175,39,150,27],[175,40,150,27,"assign"],[175,46,150,27],[175,51,150,37,"prev"],[175,55,150,41],[176,12,150,43,"targetLocation"],[177,10,150,57],[177,12,150,60],[177,13,150,61],[178,8,151,6],[179,6,152,4],[179,7,152,5],[179,9,152,7],[179,14,152,12],[179,15,152,13],[180,6,154,4],[180,13,154,11],[180,19,154,17],[181,8,155,6,"mounted"],[181,15,155,13],[181,18,155,16],[181,23,155,21],[182,8,156,6,"LocationService"],[182,32,156,21],[182,33,156,21,"LocationService"],[182,48,156,21],[182,49,156,22,"stopWatchingLocation"],[182,69,156,42],[182,70,156,43],[182,71,156,44],[183,8,157,6],[183,12,157,10,"motionSubscription"],[183,30,157,28],[183,31,157,29,"current"],[183,38,157,36],[183,40,157,38],[184,10,158,8,"motionSubscription"],[184,28,158,26],[184,29,158,27,"current"],[184,36,158,34],[184,37,158,35,"remove"],[184,43,158,41],[184,44,158,42],[184,45,158,43],[185,8,159,6],[186,8,160,6],[186,12,160,10,"locationUpdateInterval"],[186,34,160,32],[186,35,160,33,"current"],[186,42,160,40],[186,44,160,42],[187,10,161,8,"clearInterval"],[187,23,161,21],[187,24,161,22,"locationUpdateInterval"],[187,46,161,44],[187,47,161,45,"current"],[187,54,161,52],[187,55,161,53],[188,8,162,6],[189,6,163,4],[189,7,163,5],[190,4,164,2],[190,5,164,3],[190,7,164,5],[190,9,164,7],[190,10,164,8],[192,4,166,2],[193,4,167,2],[193,8,167,2,"useEffect"],[193,14,167,11],[193,15,167,11,"useEffect"],[193,24,167,11],[193,26,167,12],[193,32,167,18],[194,6,168,4],[194,10,168,8],[194,11,168,9,"compassData"],[194,22,168,20],[194,23,168,21,"userLocation"],[194,35,168,33],[194,39,168,37],[194,40,168,38,"compassData"],[194,51,168,49],[194,52,168,50,"targetLocation"],[194,66,168,64],[194,68,168,66],[195,6,170,4],[195,12,170,10,"bearingData"],[195,23,170,21],[195,26,170,24,"LocationService"],[195,50,170,39],[195,51,170,39,"LocationService"],[195,66,170,39],[195,67,170,40,"calculateBearingData"],[195,87,170,60],[195,88,171,6,"compassData"],[195,99,171,17],[195,100,171,18,"userLocation"],[195,112,171,30],[195,114,172,6,"compassData"],[195,125,172,17],[195,126,172,18,"targetLocation"],[195,140,173,4],[195,141,173,5],[196,6,175,4],[196,12,175,10,"isAligned"],[196,21,175,19],[196,24,175,22,"LocationService"],[196,48,175,37],[196,49,175,37,"LocationService"],[196,64,175,37],[196,65,175,38,"isAligned"],[196,74,175,47],[196,75,175,48,"compassData"],[196,86,175,59],[196,87,175,60,"heading"],[196,94,175,67],[196,96,175,69,"bearingData"],[196,107,175,80],[196,108,175,81,"bearing"],[196,115,175,88],[196,117,175,90],[196,119,175,92],[196,120,175,93],[197,6,176,4],[197,12,176,10,"turnInfo"],[197,20,176,18],[197,23,176,21,"LocationService"],[197,47,176,36],[197,48,176,36,"LocationService"],[197,63,176,36],[197,64,176,37,"getTurnDirection"],[197,80,176,53],[197,81,176,54,"compassData"],[197,92,176,65],[197,93,176,66,"heading"],[197,100,176,73],[197,102,176,75,"bearingData"],[197,113,176,86],[197,114,176,87,"bearing"],[197,121,176,94],[197,122,176,95],[198,6,178,4,"setCompassData"],[198,20,178,18],[198,21,178,19,"prev"],[198,25,178,23],[198,29,178,23,"Object"],[198,35,178,23],[198,36,178,23,"assign"],[198,42,178,23],[198,47,179,9,"prev"],[198,51,179,13],[199,8,180,6,"bearingData"],[199,19,180,17],[200,8,181,6,"isAligned"],[200,17,181,15],[201,8,182,6,"turnDirection"],[201,21,182,19],[201,23,182,21,"isAligned"],[201,32,182,30],[201,35,182,33],[201,39,182,37],[201,42,182,40,"turnInfo"],[201,50,182,48],[201,51,182,49,"direction"],[201,60,182,58],[202,8,183,6,"turnAngle"],[202,17,183,15],[202,19,183,17,"turnInfo"],[202,27,183,25],[202,28,183,26,"angle"],[202,33,183,31],[203,8,184,6,"distance"],[203,16,184,14],[203,18,184,16,"bearingData"],[203,29,184,27],[203,30,184,28,"distance"],[204,6,184,36],[204,8,185,6],[204,9,185,7],[206,6,187,4],[207,6,188,4],[207,10,188,8,"isAligned"],[207,19,188,17],[207,23,188,21],[207,24,188,22,"wasAligned"],[207,34,188,32],[207,38,188,36],[207,39,188,37,"manuallyClosedDarshan"],[207,60,188,58],[207,62,188,60],[208,8,189,6],[208,14,189,12,"now"],[208,17,189,15],[208,20,189,18,"Date"],[208,24,189,22],[208,25,189,23,"now"],[208,28,189,26],[208,29,189,27],[208,30,189,28],[209,8,190,6],[209,12,190,10,"now"],[209,15,190,13],[209,18,190,16,"lastHapticTime"],[209,32,190,30],[209,33,190,31,"current"],[209,40,190,38],[209,43,190,41],[209,47,190,45],[209,49,190,47],[210,10,190,49],[211,10,191,8,"Haptics"],[211,17,191,15],[211,18,191,16,"notificationAsync"],[211,35,191,33],[211,36,191,34,"Haptics"],[211,43,191,41],[211,44,191,42,"NotificationFeedbackType"],[211,68,191,66],[211,69,191,67,"Success"],[211,76,191,74],[211,77,191,75],[212,10,192,8,"lastHapticTime"],[212,24,192,22],[212,25,192,23,"current"],[212,32,192,30],[212,35,192,33,"now"],[212,38,192,36],[213,8,193,6],[214,8,194,6,"setWasAligned"],[214,21,194,19],[214,22,194,20],[214,26,194,24],[214,27,194,25],[215,6,195,4],[215,7,195,5],[215,13,195,11],[215,17,195,15],[215,18,195,16,"isAligned"],[215,27,195,25],[215,31,195,29,"wasAligned"],[215,41,195,39],[215,43,195,41],[216,8,196,6,"setWasAligned"],[216,21,196,19],[216,22,196,20],[216,27,196,25],[216,28,196,26],[217,6,197,4],[218,4,198,2],[218,5,198,3],[218,7,198,5],[218,8,198,6,"compassData"],[218,19,198,17],[218,20,198,18,"heading"],[218,27,198,25],[218,29,198,27,"compassData"],[218,40,198,38],[218,41,198,39,"userLocation"],[218,53,198,51],[218,55,198,53,"compassData"],[218,66,198,64],[218,67,198,65,"targetLocation"],[218,81,198,79],[218,83,198,81,"wasAligned"],[218,93,198,91],[218,95,198,93,"manuallyClosedDarshan"],[218,116,198,114],[218,117,198,115],[218,118,198,116],[220,4,200,2],[221,4,201,2],[221,8,201,2,"useEffect"],[221,14,201,11],[221,15,201,11,"useEffect"],[221,24,201,11],[221,26,201,12],[221,32,201,18],[222,6,202,4],[222,12,202,10,"handleAppStateChange"],[222,32,202,30],[222,35,202,34,"nextAppState"],[222,47,202,62],[222,51,202,67],[223,8,203,6],[223,12,203,10,"nextAppState"],[223,24,203,22],[223,29,203,27],[223,41,203,39],[223,43,203,41],[224,10,204,8],[225,10,205,8,"LocationService"],[225,34,205,23],[225,35,205,23,"LocationService"],[225,50,205,23],[225,51,205,24,"stopWatchingLocation"],[225,71,205,44],[225,72,205,45],[225,73,205,46],[226,10,206,8],[226,14,206,12,"motionSubscription"],[226,32,206,30],[226,33,206,31,"current"],[226,40,206,38],[226,42,206,40],[227,12,207,10,"motionSubscription"],[227,30,207,28],[227,31,207,29,"current"],[227,38,207,36],[227,39,207,37,"remove"],[227,45,207,43],[227,46,207,44],[227,47,207,45],[228,12,208,10,"motionSubscription"],[228,30,208,28],[228,31,208,29,"current"],[228,38,208,36],[228,41,208,39],[228,45,208,43],[229,10,209,8],[230,8,210,6],[230,9,210,7],[230,15,210,13],[230,19,210,17,"nextAppState"],[230,31,210,29],[230,36,210,34],[230,44,210,42],[230,46,210,44],[231,10,211,8],[232,10,212,8,"LocationService"],[232,34,212,23],[232,35,212,23,"LocationService"],[232,50,212,23],[232,51,212,24,"startWatchingLocation"],[232,72,212,45],[232,73,212,47,"location"],[232,81,212,55],[232,85,212,60],[233,12,213,10,"setCompassData"],[233,26,213,24],[233,27,213,25,"prev"],[233,31,213,29],[233,35,213,29,"Object"],[233,41,213,29],[233,42,213,29,"assign"],[233,48,213,29],[233,53,213,39,"prev"],[233,57,213,43],[234,14,213,45,"userLocation"],[234,26,213,57],[234,28,213,59,"location"],[235,12,213,67],[235,14,213,70],[235,15,213,71],[236,10,214,8],[236,11,214,9],[236,12,214,10],[238,10,216,8],[239,10,217,8,"Magnetometer"],[239,22,217,20],[239,23,217,20,"Magnetometer"],[239,35,217,20],[239,36,217,21,"isAvailableAsync"],[239,52,217,37],[239,53,217,38],[239,54,217,39],[239,55,217,40,"then"],[239,59,217,44],[239,60,217,46,"isAvailable"],[239,71,217,57],[239,75,217,62],[240,12,218,10],[240,16,218,14,"isAvailable"],[240,27,218,25],[240,31,218,29],[240,32,218,30,"motionSubscription"],[240,50,218,48],[240,51,218,49,"current"],[240,58,218,56],[240,60,218,58],[241,14,219,12,"motionSubscription"],[241,32,219,30],[241,33,219,31,"current"],[241,40,219,38],[241,43,219,41,"Magnetometer"],[241,55,219,53],[241,56,219,53,"Magnetometer"],[241,68,219,53],[241,69,219,54,"addListener"],[241,80,219,65],[241,81,219,67,"magnetometerData"],[241,97,219,83],[241,101,219,88],[242,16,220,14],[242,22,220,20],[243,18,220,22,"x"],[243,19,220,23],[244,18,220,25,"y"],[245,16,220,27],[245,17,220,28],[245,20,220,31,"magnetometerData"],[245,36,220,47],[246,16,221,14],[246,20,221,18,"heading"],[246,27,221,25],[246,30,221,28,"Math"],[246,34,221,32],[246,35,221,33,"atan2"],[246,40,221,38],[246,41,221,39,"y"],[246,42,221,40],[246,44,221,42,"x"],[246,45,221,43],[246,46,221,44],[246,50,221,48],[246,53,221,51],[246,56,221,54,"Math"],[246,60,221,58],[246,61,221,59,"PI"],[246,63,221,61],[246,64,221,62],[247,16,222,14,"heading"],[247,23,222,21],[247,26,222,24],[247,27,222,25,"heading"],[247,34,222,32],[247,37,222,35],[247,40,222,38],[247,44,222,42],[247,47,222,45],[248,16,223,14,"setCompassData"],[248,30,223,28],[248,31,223,29,"prev"],[248,35,223,33],[248,39,223,33,"Object"],[248,45,223,33],[248,46,223,33,"assign"],[248,52,223,33],[248,57,223,43,"prev"],[248,61,223,47],[249,18,223,49,"heading"],[250,16,223,56],[250,18,223,59],[250,19,223,60],[251,14,224,12],[251,15,224,13],[251,16,224,14],[252,12,225,10],[253,10,226,8],[253,11,226,9],[253,12,226,10],[254,8,227,6],[255,6,228,4],[255,7,228,5],[256,6,230,4],[256,12,230,10,"subscription"],[256,24,230,22],[256,27,230,25,"AppState"],[256,35,230,33],[256,36,230,33,"default"],[256,43,230,33],[256,44,230,34,"addEventListener"],[256,60,230,50],[256,61,230,51],[256,69,230,59],[256,71,230,61,"handleAppStateChange"],[256,91,230,81],[256,92,230,82],[257,6,231,4],[257,13,231,11],[257,19,231,17,"subscription"],[257,31,231,29],[257,33,231,31,"remove"],[257,39,231,37],[257,40,231,38],[257,41,231,39],[258,4,232,2],[258,5,232,3],[258,7,232,5],[258,9,232,7],[258,10,232,8],[260,4,234,2],[261,4,235,2],[261,10,235,8,"closeDarshan"],[261,22,235,20],[261,25,235,23,"closeDarshan"],[261,26,235,23],[261,31,235,29],[262,6,236,4,"setManuallyClosedDarshan"],[262,30,236,28],[262,31,236,29],[262,35,236,33],[262,36,236,34],[263,6,237,4,"setWasAligned"],[263,19,237,17],[263,20,237,18],[263,25,237,23],[263,26,237,24],[264,4,238,2],[264,5,238,3],[265,4,240,2],[265,10,240,8,"resetDarshanState"],[265,27,240,25],[265,30,240,28,"resetDarshanState"],[265,31,240,28],[265,36,240,34],[266,6,241,4,"setManuallyClosedDarshan"],[266,30,241,28],[266,31,241,29],[266,36,241,34],[266,37,241,35],[267,6,242,4,"setWasAligned"],[267,19,242,17],[267,20,242,18],[267,25,242,23],[267,26,242,24],[268,4,243,2],[268,5,243,3],[270,4,245,2],[271,4,246,2],[271,10,246,8,"shouldShowDarshan"],[271,27,246,25],[271,30,246,28,"compassData"],[271,41,246,39],[271,42,246,40,"isAligned"],[271,51,246,49],[271,55,246,53],[271,56,246,54,"manuallyClosedDarshan"],[271,77,246,75],[272,4,248,2],[272,11,248,2,"Object"],[272,17,248,2],[272,18,248,2,"assign"],[272,24,248,2],[272,29,249,7,"compassData"],[272,40,249,18],[273,6,250,4,"shouldShowDarshan"],[273,23,250,21],[274,6,251,4,"closeDarshan"],[274,18,251,16],[275,6,252,4,"resetDarshanState"],[276,4,252,21],[277,2,254,0],[278,2,254,1,"_s"],[278,4,254,1],[278,5,22,16,"useCompass"],[278,15,22,26],[279,0,22,26],[279,3]],"functionMap":{"names":["<global>","useCompass","useEffect$argument_0","initializeServices","setCompassData$argument_0","LocationService.startWatchingLocation$argument_0","Magnetometer.addListener$argument_0","setInterval$argument_0","motionSubscription.current.remove","<anonymous>","handleAppStateChange","Magnetometer.isAvailableAsync.then$argument_0","closeDarshan","resetDarshanState"],"mappings":"AAA;OCqB;YCsB;+BCG;yBCO;YDK;uBCI,8CD;yBCe,sDD;yBCE,qCD;yBCQ,mCD;4EEI;yBDE,6CC;SFC;yBCG;YDG;gEGO;2BFQ,8BE;WHC;iDII;2BHG,gDG;WJC;iDKG,uCL;uBCG,uCD;uBCI;UDI;KDE;iDKK;uBHI,qCG;KLE;WOE;KPS;GDC;YCG;mBEW;MFO;GDa;YCG;iCQC;8CLU;yBDC,6CC;SKC;6CCG;kELE;6BFI,8BE;aKC;SDE;KRE;WOG,4BP;GDC;uBWG;GXG;4BYE;GZG"},"hasCjsExports":false},"type":"js/module"}]}