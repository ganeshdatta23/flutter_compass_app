{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":52,"index":52}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"expo-sensors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":53},"end":{"line":2,"column":44,"index":97}}],"key":"BFOmcY3heoZY/RSSPg5xbOpveWQ=","exportNames":["*"],"imports":1}},{"name":"expo-haptics","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":98},"end":{"line":3,"column":40,"index":138}}],"key":"XxdHVlyuI491+26LeQ/AtfIvhac=","exportNames":["*"],"imports":1}},{"name":"../services/locationService","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":139},"end":{"line":4,"column":89,"index":228}}],"key":"I9192BMih11C1JeQ/D4NvvvO+Yw=","exportNames":["*"],"imports":1}},{"name":"../services/supabaseService","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":229},"end":{"line":5,"column":76,"index":305}}],"key":"S7aIFJ3C9gVBZ6jVd0JtOpUan6k=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/AppState","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"JfCM6WRyn2619+pzBJhEHd1+SSw=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _s = $RefreshSig$();\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.useCompass = useCompass;\n  var _react = require(_dependencyMap[0], \"react\");\n  var _expoSensors = require(_dependencyMap[1], \"expo-sensors\");\n  var _expoHaptics = require(_dependencyMap[2], \"expo-haptics\");\n  var Haptics = _interopNamespace(_expoHaptics);\n  var _servicesLocationService = require(_dependencyMap[3], \"../services/locationService\");\n  var _servicesSupabaseService = require(_dependencyMap[4], \"../services/supabaseService\");\n  var _reactNativeWebDistExportsAppState = require(_dependencyMap[5], \"react-native-web/dist/exports/AppState\");\n  var AppState = _interopDefault(_reactNativeWebDistExportsAppState);\n  function useCompass() {\n    _s();\n    const [compassData, setCompassData] = (0, _react.useState)({\n      heading: 0,\n      userLocation: null,\n      targetLocation: null,\n      bearingData: null,\n      isAligned: false,\n      turnDirection: null,\n      turnAngle: 0,\n      distance: 0,\n      isLoading: true,\n      error: null,\n      permissionGranted: false\n    });\n    const [wasAligned, setWasAligned] = (0, _react.useState)(false);\n    const [manuallyClosedDarshan, setManuallyClosedDarshan] = (0, _react.useState)(false);\n    const lastHapticTime = (0, _react.useRef)(0);\n    const locationUpdateInterval = (0, _react.useRef)(null);\n    const motionSubscription = (0, _react.useRef)(null);\n\n    // Initialize compass and location services\n    (0, _react.useEffect)(() => {\n      let mounted = true;\n      const initializeServices = async () => {\n        try {\n          // Request location permissions\n          const hasPermission = await _servicesLocationService.LocationService.requestPermissions();\n          if (!mounted) return;\n          if (!hasPermission) {\n            setCompassData(prev => ({\n              ...prev,\n              error: 'Location permission is required for compass functionality',\n              isLoading: false,\n              permissionGranted: false\n            }));\n            return;\n          }\n          setCompassData(prev => ({\n            ...prev,\n            permissionGranted: true\n          }));\n\n          // Get initial target location from Supabase\n          const targetLocation = await _servicesSupabaseService.SupabaseService.getSwamijiLocation();\n          if (!mounted) return;\n          if (!targetLocation) {\n            // Use default location if not found in database\n            const defaultLocation = {\n              id: 'swamiji_location',\n              latitude: 12.308367,\n              longitude: 76.645467,\n              address: 'Avadhoota Datta Peetham',\n              updated_at: new Date().toISOString()\n            };\n            setCompassData(prev => ({\n              ...prev,\n              targetLocation: defaultLocation\n            }));\n          } else {\n            setCompassData(prev => ({\n              ...prev,\n              targetLocation\n            }));\n          }\n\n          // Get initial user location\n          const userLocation = await _servicesLocationService.LocationService.getCurrentLocation();\n          if (!mounted) return;\n          if (userLocation) {\n            setCompassData(prev => ({\n              ...prev,\n              userLocation\n            }));\n          }\n\n          // Start location updates\n          const locationStarted = await _servicesLocationService.LocationService.startWatchingLocation(location => {\n            if (!mounted) return;\n            setCompassData(prev => ({\n              ...prev,\n              userLocation: location\n            }));\n          });\n          if (!locationStarted) {\n            setCompassData(prev => ({\n              ...prev,\n              error: 'Failed to start location tracking'\n            }));\n          }\n\n          // Start magnetometer (compass) updates\n          const isAvailable = await _expoSensors.Magnetometer.isAvailableAsync();\n          if (isAvailable) {\n            _expoSensors.Magnetometer.setUpdateInterval(100); // Update every 100ms\n            motionSubscription.current = _expoSensors.Magnetometer.addListener(magnetometerData => {\n              if (!mounted) return;\n\n              // Calculate heading from magnetometer data\n              const {\n                x,\n                y\n              } = magnetometerData;\n              let heading = Math.atan2(y, x) * (180 / Math.PI);\n              // Normalize to 0-360 degrees\n              heading = (heading + 360) % 360;\n              setCompassData(prev => ({\n                ...prev,\n                heading\n              }));\n            });\n          } else {\n            // Fallback: simulate compass for testing (slowly rotating)\n            let simulatedHeading = 0;\n            const simulationInterval = setInterval(() => {\n              if (!mounted) return;\n              simulatedHeading = (simulatedHeading + 1) % 360;\n              setCompassData(prev => ({\n                ...prev,\n                heading: simulatedHeading\n              }));\n            }, 100);\n\n            // Store interval for cleanup\n            motionSubscription.current = {\n              remove: () => clearInterval(simulationInterval)\n            };\n          }\n          setCompassData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n        } catch (error) {\n          if (!mounted) return;\n          console.error('Error initializing compass services:', error);\n          setCompassData(prev => ({\n            ...prev,\n            error: 'Failed to initialize compass services',\n            isLoading: false\n          }));\n        }\n      };\n      initializeServices();\n\n      // Set up periodic target location updates (every 30 seconds)\n      locationUpdateInterval.current = setInterval(async () => {\n        if (!mounted) return;\n        const targetLocation = await _servicesSupabaseService.SupabaseService.getSwamijiLocation();\n        if (targetLocation && mounted) {\n          setCompassData(prev => ({\n            ...prev,\n            targetLocation\n          }));\n        }\n      }, 30000);\n      return () => {\n        mounted = false;\n        _servicesLocationService.LocationService.stopWatchingLocation();\n        if (motionSubscription.current) {\n          motionSubscription.current.remove();\n        }\n        if (locationUpdateInterval.current) {\n          clearInterval(locationUpdateInterval.current);\n        }\n      };\n    }, []);\n\n    // Calculate bearing and alignment when location or heading changes\n    (0, _react.useEffect)(() => {\n      if (!compassData.userLocation || !compassData.targetLocation) return;\n      const bearingData = _servicesLocationService.LocationService.calculateBearingData(compassData.userLocation, compassData.targetLocation);\n      const isAligned = _servicesLocationService.LocationService.isAligned(compassData.heading, bearingData.bearing, 20);\n      const turnInfo = _servicesLocationService.LocationService.getTurnDirection(compassData.heading, bearingData.bearing);\n      setCompassData(prev => ({\n        ...prev,\n        bearingData,\n        isAligned,\n        turnDirection: isAligned ? null : turnInfo.direction,\n        turnAngle: turnInfo.angle,\n        distance: bearingData.distance\n      }));\n\n      // Handle haptic feedback for alignment\n      if (isAligned && !wasAligned && !manuallyClosedDarshan) {\n        const now = Date.now();\n        if (now - lastHapticTime.current > 2000) {\n          // Prevent too frequent haptics\n          Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);\n          lastHapticTime.current = now;\n        }\n        setWasAligned(true);\n      } else if (!isAligned && wasAligned) {\n        setWasAligned(false);\n      }\n    }, [compassData.heading, compassData.userLocation, compassData.targetLocation, wasAligned, manuallyClosedDarshan]);\n\n    // Handle app state changes (pause/resume)\n    (0, _react.useEffect)(() => {\n      const handleAppStateChange = nextAppState => {\n        if (nextAppState === 'background') {\n          // Pause location updates to save battery\n          _servicesLocationService.LocationService.stopWatchingLocation();\n          if (motionSubscription.current) {\n            motionSubscription.current.remove();\n            motionSubscription.current = null;\n          }\n        } else if (nextAppState === 'active') {\n          // Resume location updates\n          _servicesLocationService.LocationService.startWatchingLocation(location => {\n            setCompassData(prev => ({\n              ...prev,\n              userLocation: location\n            }));\n          });\n\n          // Resume magnetometer updates\n          _expoSensors.Magnetometer.isAvailableAsync().then(isAvailable => {\n            if (isAvailable && !motionSubscription.current) {\n              motionSubscription.current = _expoSensors.Magnetometer.addListener(magnetometerData => {\n                const {\n                  x,\n                  y\n                } = magnetometerData;\n                let heading = Math.atan2(y, x) * (180 / Math.PI);\n                heading = (heading + 360) % 360;\n                setCompassData(prev => ({\n                  ...prev,\n                  heading\n                }));\n              });\n            }\n          });\n        }\n      };\n      const subscription = AppState.default.addEventListener('change', handleAppStateChange);\n      return () => subscription?.remove();\n    }, []);\n\n    // Methods for darshan management\n    const closeDarshan = () => {\n      setManuallyClosedDarshan(true);\n      setWasAligned(false);\n    };\n    const resetDarshanState = () => {\n      setManuallyClosedDarshan(false);\n      setWasAligned(false);\n    };\n\n    // Check if darshan should be shown\n    const shouldShowDarshan = compassData.isAligned && !manuallyClosedDarshan;\n    return {\n      ...compassData,\n      shouldShowDarshan,\n      closeDarshan,\n      resetDarshanState\n    };\n  }\n  _s(useCompass, \"xpZSFgwNbLqS7+d1+sxt9s9V4uE=\");\n});","lineCount":295,"map":[[28,2,22,0,"exports"],[28,9,22,0],[28,10,22,0,"useCompass"],[28,20,22,0],[28,23,22,0,"useCompass"],[28,33,22,0],[29,2,1,0],[29,6,1,0,"_react"],[29,12,1,0],[29,15,1,0,"require"],[29,22,1,0],[29,23,1,0,"_dependencyMap"],[29,37,1,0],[30,2,2,0],[30,6,2,0,"_expoSensors"],[30,18,2,0],[30,21,2,0,"require"],[30,28,2,0],[30,29,2,0,"_dependencyMap"],[30,43,2,0],[31,2,3,0],[31,6,3,0,"_expoHaptics"],[31,18,3,0],[31,21,3,0,"require"],[31,28,3,0],[31,29,3,0,"_dependencyMap"],[31,43,3,0],[32,2,3,0],[32,6,3,0,"Haptics"],[32,13,3,0],[32,16,3,0,"_interopNamespace"],[32,33,3,0],[32,34,3,0,"_expoHaptics"],[32,46,3,0],[33,2,4,0],[33,6,4,0,"_servicesLocationService"],[33,30,4,0],[33,33,4,0,"require"],[33,40,4,0],[33,41,4,0,"_dependencyMap"],[33,55,4,0],[34,2,5,0],[34,6,5,0,"_servicesSupabaseService"],[34,30,5,0],[34,33,5,0,"require"],[34,40,5,0],[34,41,5,0,"_dependencyMap"],[34,55,5,0],[35,2,5,76],[35,6,5,76,"_reactNativeWebDistExportsAppState"],[35,40,5,76],[35,43,5,76,"require"],[35,50,5,76],[35,51,5,76,"_dependencyMap"],[35,65,5,76],[36,2,5,76],[36,6,5,76,"AppState"],[36,14,5,76],[36,17,5,76,"_interopDefault"],[36,32,5,76],[36,33,5,76,"_reactNativeWebDistExportsAppState"],[36,67,5,76],[37,2,22,7],[37,11,22,16,"useCompass"],[37,21,22,26,"useCompass"],[37,22,22,26],[37,24,22,29],[38,4,22,29,"_s"],[38,6,22,29],[39,4,23,2],[39,10,23,8],[39,11,23,9,"compassData"],[39,22,23,20],[39,24,23,22,"setCompassData"],[39,38,23,36],[39,39,23,37],[39,42,23,40],[39,46,23,40,"useState"],[39,52,23,48],[39,53,23,48,"useState"],[39,61,23,48],[39,63,23,62],[40,6,24,4,"heading"],[40,13,24,11],[40,15,24,13],[40,16,24,14],[41,6,25,4,"userLocation"],[41,18,25,16],[41,20,25,18],[41,24,25,22],[42,6,26,4,"targetLocation"],[42,20,26,18],[42,22,26,20],[42,26,26,24],[43,6,27,4,"bearingData"],[43,17,27,15],[43,19,27,17],[43,23,27,21],[44,6,28,4,"isAligned"],[44,15,28,13],[44,17,28,15],[44,22,28,20],[45,6,29,4,"turnDirection"],[45,19,29,17],[45,21,29,19],[45,25,29,23],[46,6,30,4,"turnAngle"],[46,15,30,13],[46,17,30,15],[46,18,30,16],[47,6,31,4,"distance"],[47,14,31,12],[47,16,31,14],[47,17,31,15],[48,6,32,4,"isLoading"],[48,15,32,13],[48,17,32,15],[48,21,32,19],[49,6,33,4,"error"],[49,11,33,9],[49,13,33,11],[49,17,33,15],[50,6,34,4,"permissionGranted"],[50,23,34,21],[50,25,34,23],[51,4,35,2],[51,5,35,3],[51,6,35,4],[52,4,37,2],[52,10,37,8],[52,11,37,9,"wasAligned"],[52,21,37,19],[52,23,37,21,"setWasAligned"],[52,36,37,34],[52,37,37,35],[52,40,37,38],[52,44,37,38,"useState"],[52,50,37,46],[52,51,37,46,"useState"],[52,59,37,46],[52,61,37,47],[52,66,37,52],[52,67,37,53],[53,4,38,2],[53,10,38,8],[53,11,38,9,"manuallyClosedDarshan"],[53,32,38,30],[53,34,38,32,"setManuallyClosedDarshan"],[53,58,38,56],[53,59,38,57],[53,62,38,60],[53,66,38,60,"useState"],[53,72,38,68],[53,73,38,68,"useState"],[53,81,38,68],[53,83,38,69],[53,88,38,74],[53,89,38,75],[54,4,39,2],[54,10,39,8,"lastHapticTime"],[54,24,39,22],[54,27,39,25],[54,31,39,25,"useRef"],[54,37,39,31],[54,38,39,31,"useRef"],[54,44,39,31],[54,46,39,32],[54,47,39,33],[54,48,39,34],[55,4,40,2],[55,10,40,8,"locationUpdateInterval"],[55,32,40,30],[55,35,40,33],[55,39,40,33,"useRef"],[55,45,40,39],[55,46,40,39,"useRef"],[55,52,40,39],[55,54,40,63],[55,58,40,67],[55,59,40,68],[56,4,41,2],[56,10,41,8,"motionSubscription"],[56,28,41,26],[56,31,41,29],[56,35,41,29,"useRef"],[56,41,41,35],[56,42,41,35,"useRef"],[56,48,41,35],[56,50,41,41],[56,54,41,45],[56,55,41,46],[58,4,43,2],[59,4,44,2],[59,8,44,2,"useEffect"],[59,14,44,11],[59,15,44,11,"useEffect"],[59,24,44,11],[59,26,44,12],[59,32,44,18],[60,6,45,4],[60,10,45,8,"mounted"],[60,17,45,15],[60,20,45,18],[60,24,45,22],[61,6,47,4],[61,12,47,10,"initializeServices"],[61,30,47,28],[61,33,47,31],[61,39,47,31,"initializeServices"],[61,40,47,31],[61,45,47,43],[62,8,48,6],[62,12,48,10],[63,10,49,8],[64,10,50,8],[64,16,50,14,"hasPermission"],[64,29,50,27],[64,32,50,30],[64,38,50,36,"LocationService"],[64,62,50,51],[64,63,50,51,"LocationService"],[64,78,50,51],[64,79,50,52,"requestPermissions"],[64,97,50,70],[64,98,50,71],[64,99,50,72],[65,10,51,8],[65,14,51,12],[65,15,51,13,"mounted"],[65,22,51,20],[65,24,51,22],[66,10,53,8],[66,14,53,12],[66,15,53,13,"hasPermission"],[66,28,53,26],[66,30,53,28],[67,12,54,10,"setCompassData"],[67,26,54,24],[67,27,54,25,"prev"],[67,31,54,29],[67,36,54,34],[68,14,55,12],[68,17,55,15,"prev"],[68,21,55,19],[69,14,56,12,"error"],[69,19,56,17],[69,21,56,19],[69,80,56,78],[70,14,57,12,"isLoading"],[70,23,57,21],[70,25,57,23],[70,30,57,28],[71,14,58,12,"permissionGranted"],[71,31,58,29],[71,33,58,31],[72,12,59,10],[72,13,59,11],[72,14,59,12],[72,15,59,13],[73,12,60,10],[74,10,61,8],[75,10,63,8,"setCompassData"],[75,24,63,22],[75,25,63,23,"prev"],[75,29,63,27],[75,34,63,32],[76,12,63,34],[76,15,63,37,"prev"],[76,19,63,41],[77,12,63,43,"permissionGranted"],[77,29,63,60],[77,31,63,62],[78,10,63,67],[78,11,63,68],[78,12,63,69],[78,13,63,70],[80,10,65,8],[81,10,66,8],[81,16,66,14,"targetLocation"],[81,30,66,28],[81,33,66,31],[81,39,66,37,"SupabaseService"],[81,63,66,52],[81,64,66,52,"SupabaseService"],[81,79,66,52],[81,80,66,53,"getSwamijiLocation"],[81,98,66,71],[81,99,66,72],[81,100,66,73],[82,10,67,8],[82,14,67,12],[82,15,67,13,"mounted"],[82,22,67,20],[82,24,67,22],[83,10,69,8],[83,14,69,12],[83,15,69,13,"targetLocation"],[83,29,69,27],[83,31,69,29],[84,12,70,10],[85,12,71,10],[85,18,71,16,"defaultLocation"],[85,33,71,45],[85,36,71,48],[86,14,72,12,"id"],[86,16,72,14],[86,18,72,16],[86,36,72,34],[87,14,73,12,"latitude"],[87,22,73,20],[87,24,73,22],[87,33,73,31],[88,14,74,12,"longitude"],[88,23,74,21],[88,25,74,23],[88,34,74,32],[89,14,75,12,"address"],[89,21,75,19],[89,23,75,21],[89,48,75,46],[90,14,76,12,"updated_at"],[90,24,76,22],[90,26,76,24],[90,30,76,28,"Date"],[90,34,76,32],[90,35,76,33],[90,36,76,34],[90,37,76,35,"toISOString"],[90,48,76,46],[90,49,76,47],[91,12,77,10],[91,13,77,11],[92,12,78,10,"setCompassData"],[92,26,78,24],[92,27,78,25,"prev"],[92,31,78,29],[92,36,78,34],[93,14,78,36],[93,17,78,39,"prev"],[93,21,78,43],[94,14,78,45,"targetLocation"],[94,28,78,59],[94,30,78,61,"defaultLocation"],[95,12,78,77],[95,13,78,78],[95,14,78,79],[95,15,78,80],[96,10,79,8],[96,11,79,9],[96,17,79,15],[97,12,80,10,"setCompassData"],[97,26,80,24],[97,27,80,25,"prev"],[97,31,80,29],[97,36,80,34],[98,14,80,36],[98,17,80,39,"prev"],[98,21,80,43],[99,14,80,45,"targetLocation"],[100,12,80,60],[100,13,80,61],[100,14,80,62],[100,15,80,63],[101,10,81,8],[103,10,83,8],[104,10,84,8],[104,16,84,14,"userLocation"],[104,28,84,26],[104,31,84,29],[104,37,84,35,"LocationService"],[104,61,84,50],[104,62,84,50,"LocationService"],[104,77,84,50],[104,78,84,51,"getCurrentLocation"],[104,96,84,69],[104,97,84,70],[104,98,84,71],[105,10,85,8],[105,14,85,12],[105,15,85,13,"mounted"],[105,22,85,20],[105,24,85,22],[106,10,87,8],[106,14,87,12,"userLocation"],[106,26,87,24],[106,28,87,26],[107,12,88,10,"setCompassData"],[107,26,88,24],[107,27,88,25,"prev"],[107,31,88,29],[107,36,88,34],[108,14,88,36],[108,17,88,39,"prev"],[108,21,88,43],[109,14,88,45,"userLocation"],[110,12,88,58],[110,13,88,59],[110,14,88,60],[110,15,88,61],[111,10,89,8],[113,10,91,8],[114,10,92,8],[114,16,92,14,"locationStarted"],[114,31,92,29],[114,34,92,32],[114,40,92,38,"LocationService"],[114,64,92,53],[114,65,92,53,"LocationService"],[114,80,92,53],[114,81,92,54,"startWatchingLocation"],[114,102,92,75],[114,103,92,77,"location"],[114,111,92,85],[114,115,92,90],[115,12,93,10],[115,16,93,14],[115,17,93,15,"mounted"],[115,24,93,22],[115,26,93,24],[116,12,94,10,"setCompassData"],[116,26,94,24],[116,27,94,25,"prev"],[116,31,94,29],[116,36,94,34],[117,14,94,36],[117,17,94,39,"prev"],[117,21,94,43],[118,14,94,45,"userLocation"],[118,26,94,57],[118,28,94,59,"location"],[119,12,94,68],[119,13,94,69],[119,14,94,70],[119,15,94,71],[120,10,95,8],[120,11,95,9],[120,12,95,10],[121,10,97,8],[121,14,97,12],[121,15,97,13,"locationStarted"],[121,30,97,28],[121,32,97,30],[122,12,98,10,"setCompassData"],[122,26,98,24],[122,27,98,25,"prev"],[122,31,98,29],[122,36,98,34],[123,14,99,12],[123,17,99,15,"prev"],[123,21,99,19],[124,14,100,12,"error"],[124,19,100,17],[124,21,100,19],[125,12,101,10],[125,13,101,11],[125,14,101,12],[125,15,101,13],[126,10,102,8],[128,10,104,8],[129,10,105,8],[129,16,105,14,"isAvailable"],[129,27,105,25],[129,30,105,28],[129,36,105,34,"Magnetometer"],[129,48,105,46],[129,49,105,46,"Magnetometer"],[129,61,105,46],[129,62,105,47,"isAvailableAsync"],[129,78,105,63],[129,79,105,64],[129,80,105,65],[130,10,106,8],[130,14,106,12,"isAvailable"],[130,25,106,23],[130,27,106,25],[131,12,107,10,"Magnetometer"],[131,24,107,22],[131,25,107,22,"Magnetometer"],[131,37,107,22],[131,38,107,23,"setUpdateInterval"],[131,55,107,40],[131,56,107,41],[131,59,107,44],[131,60,107,45],[131,61,107,46],[131,62,107,47],[132,12,108,10,"motionSubscription"],[132,30,108,28],[132,31,108,29,"current"],[132,38,108,36],[132,41,108,39,"Magnetometer"],[132,53,108,51],[132,54,108,51,"Magnetometer"],[132,66,108,51],[132,67,108,52,"addListener"],[132,78,108,63],[132,79,108,65,"magnetometerData"],[132,95,108,81],[132,99,108,86],[133,14,109,12],[133,18,109,16],[133,19,109,17,"mounted"],[133,26,109,24],[133,28,109,26],[135,14,111,12],[136,14,112,12],[136,20,112,18],[137,16,112,20,"x"],[137,17,112,21],[138,16,112,23,"y"],[139,14,112,25],[139,15,112,26],[139,18,112,29,"magnetometerData"],[139,34,112,45],[140,14,113,12],[140,18,113,16,"heading"],[140,25,113,23],[140,28,113,26,"Math"],[140,32,113,30],[140,33,113,31,"atan2"],[140,38,113,36],[140,39,113,37,"y"],[140,40,113,38],[140,42,113,40,"x"],[140,43,113,41],[140,44,113,42],[140,48,113,46],[140,51,113,49],[140,54,113,52,"Math"],[140,58,113,56],[140,59,113,57,"PI"],[140,61,113,59],[140,62,113,60],[141,14,114,12],[142,14,115,12,"heading"],[142,21,115,19],[142,24,115,22],[142,25,115,23,"heading"],[142,32,115,30],[142,35,115,33],[142,38,115,36],[142,42,115,40],[142,45,115,43],[143,14,116,12,"setCompassData"],[143,28,116,26],[143,29,116,27,"prev"],[143,33,116,31],[143,38,116,36],[144,16,116,38],[144,19,116,41,"prev"],[144,23,116,45],[145,16,116,47,"heading"],[146,14,116,55],[146,15,116,56],[146,16,116,57],[146,17,116,58],[147,12,117,10],[147,13,117,11],[147,14,117,12],[148,10,118,8],[148,11,118,9],[148,17,118,15],[149,12,119,10],[150,12,120,10],[150,16,120,14,"simulatedHeading"],[150,32,120,30],[150,35,120,33],[150,36,120,34],[151,12,121,10],[151,18,121,16,"simulationInterval"],[151,36,121,34],[151,39,121,37,"setInterval"],[151,50,121,48],[151,51,121,49],[151,57,121,55],[152,14,122,12],[152,18,122,16],[152,19,122,17,"mounted"],[152,26,122,24],[152,28,122,26],[153,14,123,12,"simulatedHeading"],[153,30,123,28],[153,33,123,31],[153,34,123,32,"simulatedHeading"],[153,50,123,48],[153,53,123,51],[153,54,123,52],[153,58,123,56],[153,61,123,59],[154,14,124,12,"setCompassData"],[154,28,124,26],[154,29,124,27,"prev"],[154,33,124,31],[154,38,124,36],[155,16,124,38],[155,19,124,41,"prev"],[155,23,124,45],[156,16,124,47,"heading"],[156,23,124,54],[156,25,124,56,"simulatedHeading"],[157,14,124,73],[157,15,124,74],[157,16,124,75],[157,17,124,76],[158,12,125,10],[158,13,125,11],[158,15,125,13],[158,18,125,16],[158,19,125,17],[160,12,127,10],[161,12,128,10,"motionSubscription"],[161,30,128,28],[161,31,128,29,"current"],[161,38,128,36],[161,41,128,39],[162,14,128,41,"remove"],[162,20,128,47],[162,22,128,49,"remove"],[162,23,128,49],[162,28,128,55,"clearInterval"],[162,41,128,68],[162,42,128,69,"simulationInterval"],[162,60,128,87],[163,12,128,89],[163,13,128,90],[164,10,129,8],[165,10,131,8,"setCompassData"],[165,24,131,22],[165,25,131,23,"prev"],[165,29,131,27],[165,34,131,32],[166,12,131,34],[166,15,131,37,"prev"],[166,19,131,41],[167,12,131,43,"isLoading"],[167,21,131,52],[167,23,131,54],[168,10,131,60],[168,11,131,61],[168,12,131,62],[168,13,131,63],[169,8,132,6],[169,9,132,7],[169,10,132,8],[169,17,132,15,"error"],[169,22,132,20],[169,24,132,22],[170,10,133,8],[170,14,133,12],[170,15,133,13,"mounted"],[170,22,133,20],[170,24,133,22],[171,10,134,8,"console"],[171,17,134,15],[171,18,134,16,"error"],[171,23,134,21],[171,24,134,22],[171,62,134,60],[171,64,134,62,"error"],[171,69,134,67],[171,70,134,68],[172,10,135,8,"setCompassData"],[172,24,135,22],[172,25,135,23,"prev"],[172,29,135,27],[172,34,135,32],[173,12,136,10],[173,15,136,13,"prev"],[173,19,136,17],[174,12,137,10,"error"],[174,17,137,15],[174,19,137,17],[174,58,137,56],[175,12,138,10,"isLoading"],[175,21,138,19],[175,23,138,21],[176,10,139,8],[176,11,139,9],[176,12,139,10],[176,13,139,11],[177,8,140,6],[178,6,141,4],[178,7,141,5],[179,6,143,4,"initializeServices"],[179,24,143,22],[179,25,143,23],[179,26,143,24],[181,6,145,4],[182,6,146,4,"locationUpdateInterval"],[182,28,146,26],[182,29,146,27,"current"],[182,36,146,34],[182,39,146,37,"setInterval"],[182,50,146,48],[182,51,146,49],[182,63,146,61],[183,8,147,6],[183,12,147,10],[183,13,147,11,"mounted"],[183,20,147,18],[183,22,147,20],[184,8,148,6],[184,14,148,12,"targetLocation"],[184,28,148,26],[184,31,148,29],[184,37,148,35,"SupabaseService"],[184,61,148,50],[184,62,148,50,"SupabaseService"],[184,77,148,50],[184,78,148,51,"getSwamijiLocation"],[184,96,148,69],[184,97,148,70],[184,98,148,71],[185,8,149,6],[185,12,149,10,"targetLocation"],[185,26,149,24],[185,30,149,28,"mounted"],[185,37,149,35],[185,39,149,37],[186,10,150,8,"setCompassData"],[186,24,150,22],[186,25,150,23,"prev"],[186,29,150,27],[186,34,150,32],[187,12,150,34],[187,15,150,37,"prev"],[187,19,150,41],[188,12,150,43,"targetLocation"],[189,10,150,58],[189,11,150,59],[189,12,150,60],[189,13,150,61],[190,8,151,6],[191,6,152,4],[191,7,152,5],[191,9,152,7],[191,14,152,12],[191,15,152,13],[192,6,154,4],[192,13,154,11],[192,19,154,17],[193,8,155,6,"mounted"],[193,15,155,13],[193,18,155,16],[193,23,155,21],[194,8,156,6,"LocationService"],[194,32,156,21],[194,33,156,21,"LocationService"],[194,48,156,21],[194,49,156,22,"stopWatchingLocation"],[194,69,156,42],[194,70,156,43],[194,71,156,44],[195,8,157,6],[195,12,157,10,"motionSubscription"],[195,30,157,28],[195,31,157,29,"current"],[195,38,157,36],[195,40,157,38],[196,10,158,8,"motionSubscription"],[196,28,158,26],[196,29,158,27,"current"],[196,36,158,34],[196,37,158,35,"remove"],[196,43,158,41],[196,44,158,42],[196,45,158,43],[197,8,159,6],[198,8,160,6],[198,12,160,10,"locationUpdateInterval"],[198,34,160,32],[198,35,160,33,"current"],[198,42,160,40],[198,44,160,42],[199,10,161,8,"clearInterval"],[199,23,161,21],[199,24,161,22,"locationUpdateInterval"],[199,46,161,44],[199,47,161,45,"current"],[199,54,161,52],[199,55,161,53],[200,8,162,6],[201,6,163,4],[201,7,163,5],[202,4,164,2],[202,5,164,3],[202,7,164,5],[202,9,164,7],[202,10,164,8],[204,4,166,2],[205,4,167,2],[205,8,167,2,"useEffect"],[205,14,167,11],[205,15,167,11,"useEffect"],[205,24,167,11],[205,26,167,12],[205,32,167,18],[206,6,168,4],[206,10,168,8],[206,11,168,9,"compassData"],[206,22,168,20],[206,23,168,21,"userLocation"],[206,35,168,33],[206,39,168,37],[206,40,168,38,"compassData"],[206,51,168,49],[206,52,168,50,"targetLocation"],[206,66,168,64],[206,68,168,66],[207,6,170,4],[207,12,170,10,"bearingData"],[207,23,170,21],[207,26,170,24,"LocationService"],[207,50,170,39],[207,51,170,39,"LocationService"],[207,66,170,39],[207,67,170,40,"calculateBearingData"],[207,87,170,60],[207,88,171,6,"compassData"],[207,99,171,17],[207,100,171,18,"userLocation"],[207,112,171,30],[207,114,172,6,"compassData"],[207,125,172,17],[207,126,172,18,"targetLocation"],[207,140,173,4],[207,141,173,5],[208,6,175,4],[208,12,175,10,"isAligned"],[208,21,175,19],[208,24,175,22,"LocationService"],[208,48,175,37],[208,49,175,37,"LocationService"],[208,64,175,37],[208,65,175,38,"isAligned"],[208,74,175,47],[208,75,175,48,"compassData"],[208,86,175,59],[208,87,175,60,"heading"],[208,94,175,67],[208,96,175,69,"bearingData"],[208,107,175,80],[208,108,175,81,"bearing"],[208,115,175,88],[208,117,175,90],[208,119,175,92],[208,120,175,93],[209,6,176,4],[209,12,176,10,"turnInfo"],[209,20,176,18],[209,23,176,21,"LocationService"],[209,47,176,36],[209,48,176,36,"LocationService"],[209,63,176,36],[209,64,176,37,"getTurnDirection"],[209,80,176,53],[209,81,176,54,"compassData"],[209,92,176,65],[209,93,176,66,"heading"],[209,100,176,73],[209,102,176,75,"bearingData"],[209,113,176,86],[209,114,176,87,"bearing"],[209,121,176,94],[209,122,176,95],[210,6,178,4,"setCompassData"],[210,20,178,18],[210,21,178,19,"prev"],[210,25,178,23],[210,30,178,28],[211,8,179,6],[211,11,179,9,"prev"],[211,15,179,13],[212,8,180,6,"bearingData"],[212,19,180,17],[213,8,181,6,"isAligned"],[213,17,181,15],[214,8,182,6,"turnDirection"],[214,21,182,19],[214,23,182,21,"isAligned"],[214,32,182,30],[214,35,182,33],[214,39,182,37],[214,42,182,40,"turnInfo"],[214,50,182,48],[214,51,182,49,"direction"],[214,60,182,58],[215,8,183,6,"turnAngle"],[215,17,183,15],[215,19,183,17,"turnInfo"],[215,27,183,25],[215,28,183,26,"angle"],[215,33,183,31],[216,8,184,6,"distance"],[216,16,184,14],[216,18,184,16,"bearingData"],[216,29,184,27],[216,30,184,28,"distance"],[217,6,185,4],[217,7,185,5],[217,8,185,6],[217,9,185,7],[219,6,187,4],[220,6,188,4],[220,10,188,8,"isAligned"],[220,19,188,17],[220,23,188,21],[220,24,188,22,"wasAligned"],[220,34,188,32],[220,38,188,36],[220,39,188,37,"manuallyClosedDarshan"],[220,60,188,58],[220,62,188,60],[221,8,189,6],[221,14,189,12,"now"],[221,17,189,15],[221,20,189,18,"Date"],[221,24,189,22],[221,25,189,23,"now"],[221,28,189,26],[221,29,189,27],[221,30,189,28],[222,8,190,6],[222,12,190,10,"now"],[222,15,190,13],[222,18,190,16,"lastHapticTime"],[222,32,190,30],[222,33,190,31,"current"],[222,40,190,38],[222,43,190,41],[222,47,190,45],[222,49,190,47],[223,10,190,49],[224,10,191,8,"Haptics"],[224,17,191,15],[224,18,191,16,"notificationAsync"],[224,35,191,33],[224,36,191,34,"Haptics"],[224,43,191,41],[224,44,191,42,"NotificationFeedbackType"],[224,68,191,66],[224,69,191,67,"Success"],[224,76,191,74],[224,77,191,75],[225,10,192,8,"lastHapticTime"],[225,24,192,22],[225,25,192,23,"current"],[225,32,192,30],[225,35,192,33,"now"],[225,38,192,36],[226,8,193,6],[227,8,194,6,"setWasAligned"],[227,21,194,19],[227,22,194,20],[227,26,194,24],[227,27,194,25],[228,6,195,4],[228,7,195,5],[228,13,195,11],[228,17,195,15],[228,18,195,16,"isAligned"],[228,27,195,25],[228,31,195,29,"wasAligned"],[228,41,195,39],[228,43,195,41],[229,8,196,6,"setWasAligned"],[229,21,196,19],[229,22,196,20],[229,27,196,25],[229,28,196,26],[230,6,197,4],[231,4,198,2],[231,5,198,3],[231,7,198,5],[231,8,198,6,"compassData"],[231,19,198,17],[231,20,198,18,"heading"],[231,27,198,25],[231,29,198,27,"compassData"],[231,40,198,38],[231,41,198,39,"userLocation"],[231,53,198,51],[231,55,198,53,"compassData"],[231,66,198,64],[231,67,198,65,"targetLocation"],[231,81,198,79],[231,83,198,81,"wasAligned"],[231,93,198,91],[231,95,198,93,"manuallyClosedDarshan"],[231,116,198,114],[231,117,198,115],[231,118,198,116],[233,4,200,2],[234,4,201,2],[234,8,201,2,"useEffect"],[234,14,201,11],[234,15,201,11,"useEffect"],[234,24,201,11],[234,26,201,12],[234,32,201,18],[235,6,202,4],[235,12,202,10,"handleAppStateChange"],[235,32,202,30],[235,35,202,34,"nextAppState"],[235,47,202,62],[235,51,202,67],[236,8,203,6],[236,12,203,10,"nextAppState"],[236,24,203,22],[236,29,203,27],[236,41,203,39],[236,43,203,41],[237,10,204,8],[238,10,205,8,"LocationService"],[238,34,205,23],[238,35,205,23,"LocationService"],[238,50,205,23],[238,51,205,24,"stopWatchingLocation"],[238,71,205,44],[238,72,205,45],[238,73,205,46],[239,10,206,8],[239,14,206,12,"motionSubscription"],[239,32,206,30],[239,33,206,31,"current"],[239,40,206,38],[239,42,206,40],[240,12,207,10,"motionSubscription"],[240,30,207,28],[240,31,207,29,"current"],[240,38,207,36],[240,39,207,37,"remove"],[240,45,207,43],[240,46,207,44],[240,47,207,45],[241,12,208,10,"motionSubscription"],[241,30,208,28],[241,31,208,29,"current"],[241,38,208,36],[241,41,208,39],[241,45,208,43],[242,10,209,8],[243,8,210,6],[243,9,210,7],[243,15,210,13],[243,19,210,17,"nextAppState"],[243,31,210,29],[243,36,210,34],[243,44,210,42],[243,46,210,44],[244,10,211,8],[245,10,212,8,"LocationService"],[245,34,212,23],[245,35,212,23,"LocationService"],[245,50,212,23],[245,51,212,24,"startWatchingLocation"],[245,72,212,45],[245,73,212,47,"location"],[245,81,212,55],[245,85,212,60],[246,12,213,10,"setCompassData"],[246,26,213,24],[246,27,213,25,"prev"],[246,31,213,29],[246,36,213,34],[247,14,213,36],[247,17,213,39,"prev"],[247,21,213,43],[248,14,213,45,"userLocation"],[248,26,213,57],[248,28,213,59,"location"],[249,12,213,68],[249,13,213,69],[249,14,213,70],[249,15,213,71],[250,10,214,8],[250,11,214,9],[250,12,214,10],[252,10,216,8],[253,10,217,8,"Magnetometer"],[253,22,217,20],[253,23,217,20,"Magnetometer"],[253,35,217,20],[253,36,217,21,"isAvailableAsync"],[253,52,217,37],[253,53,217,38],[253,54,217,39],[253,55,217,40,"then"],[253,59,217,44],[253,60,217,46,"isAvailable"],[253,71,217,57],[253,75,217,62],[254,12,218,10],[254,16,218,14,"isAvailable"],[254,27,218,25],[254,31,218,29],[254,32,218,30,"motionSubscription"],[254,50,218,48],[254,51,218,49,"current"],[254,58,218,56],[254,60,218,58],[255,14,219,12,"motionSubscription"],[255,32,219,30],[255,33,219,31,"current"],[255,40,219,38],[255,43,219,41,"Magnetometer"],[255,55,219,53],[255,56,219,53,"Magnetometer"],[255,68,219,53],[255,69,219,54,"addListener"],[255,80,219,65],[255,81,219,67,"magnetometerData"],[255,97,219,83],[255,101,219,88],[256,16,220,14],[256,22,220,20],[257,18,220,22,"x"],[257,19,220,23],[258,18,220,25,"y"],[259,16,220,27],[259,17,220,28],[259,20,220,31,"magnetometerData"],[259,36,220,47],[260,16,221,14],[260,20,221,18,"heading"],[260,27,221,25],[260,30,221,28,"Math"],[260,34,221,32],[260,35,221,33,"atan2"],[260,40,221,38],[260,41,221,39,"y"],[260,42,221,40],[260,44,221,42,"x"],[260,45,221,43],[260,46,221,44],[260,50,221,48],[260,53,221,51],[260,56,221,54,"Math"],[260,60,221,58],[260,61,221,59,"PI"],[260,63,221,61],[260,64,221,62],[261,16,222,14,"heading"],[261,23,222,21],[261,26,222,24],[261,27,222,25,"heading"],[261,34,222,32],[261,37,222,35],[261,40,222,38],[261,44,222,42],[261,47,222,45],[262,16,223,14,"setCompassData"],[262,30,223,28],[262,31,223,29,"prev"],[262,35,223,33],[262,40,223,38],[263,18,223,40],[263,21,223,43,"prev"],[263,25,223,47],[264,18,223,49,"heading"],[265,16,223,57],[265,17,223,58],[265,18,223,59],[265,19,223,60],[266,14,224,12],[266,15,224,13],[266,16,224,14],[267,12,225,10],[268,10,226,8],[268,11,226,9],[268,12,226,10],[269,8,227,6],[270,6,228,4],[270,7,228,5],[271,6,230,4],[271,12,230,10,"subscription"],[271,24,230,22],[271,27,230,25,"AppState"],[271,35,230,33],[271,36,230,33,"default"],[271,43,230,33],[271,44,230,34,"addEventListener"],[271,60,230,50],[271,61,230,51],[271,69,230,59],[271,71,230,61,"handleAppStateChange"],[271,91,230,81],[271,92,230,82],[272,6,231,4],[272,13,231,11],[272,19,231,17,"subscription"],[272,31,231,29],[272,33,231,31,"remove"],[272,39,231,37],[272,40,231,38],[272,41,231,39],[273,4,232,2],[273,5,232,3],[273,7,232,5],[273,9,232,7],[273,10,232,8],[275,4,234,2],[276,4,235,2],[276,10,235,8,"closeDarshan"],[276,22,235,20],[276,25,235,23,"closeDarshan"],[276,26,235,23],[276,31,235,29],[277,6,236,4,"setManuallyClosedDarshan"],[277,30,236,28],[277,31,236,29],[277,35,236,33],[277,36,236,34],[278,6,237,4,"setWasAligned"],[278,19,237,17],[278,20,237,18],[278,25,237,23],[278,26,237,24],[279,4,238,2],[279,5,238,3],[280,4,240,2],[280,10,240,8,"resetDarshanState"],[280,27,240,25],[280,30,240,28,"resetDarshanState"],[280,31,240,28],[280,36,240,34],[281,6,241,4,"setManuallyClosedDarshan"],[281,30,241,28],[281,31,241,29],[281,36,241,34],[281,37,241,35],[282,6,242,4,"setWasAligned"],[282,19,242,17],[282,20,242,18],[282,25,242,23],[282,26,242,24],[283,4,243,2],[283,5,243,3],[285,4,245,2],[286,4,246,2],[286,10,246,8,"shouldShowDarshan"],[286,27,246,25],[286,30,246,28,"compassData"],[286,41,246,39],[286,42,246,40,"isAligned"],[286,51,246,49],[286,55,246,53],[286,56,246,54,"manuallyClosedDarshan"],[286,77,246,75],[287,4,248,2],[287,11,248,9],[288,6,249,4],[288,9,249,7,"compassData"],[288,20,249,18],[289,6,250,4,"shouldShowDarshan"],[289,23,250,21],[290,6,251,4,"closeDarshan"],[290,18,251,16],[291,6,252,4,"resetDarshanState"],[292,4,253,2],[292,5,253,3],[293,2,254,0],[294,2,254,1,"_s"],[294,4,254,1],[294,5,22,16,"useCompass"],[294,15,22,26],[295,0,22,26],[295,3]],"functionMap":{"names":["<global>","useCompass","useEffect$argument_0","initializeServices","setCompassData$argument_0","LocationService.startWatchingLocation$argument_0","Magnetometer.addListener$argument_0","setInterval$argument_0","motionSubscription.current.remove","<anonymous>","handleAppStateChange","Magnetometer.isAvailableAsync.then$argument_0","closeDarshan","resetDarshanState"],"mappings":"AAA;OCqB;YCsB;+BCG;yBCO;YDK;uBCI,8CD;yBCe,sDD;yBCE,qCD;yBCQ,mCD;4EEI;yBDE,6CC;SFC;yBCG;YDG;gEGO;2BFQ,8BE;WHC;iDII;2BHG,gDG;WJC;iDKG,uCL;uBCG,uCD;uBCI;UDI;KDE;iDKK;uBHI,qCG;KLE;WOE;KPS;GDC;YCG;mBEW;MFO;GDa;YCG;iCQC;8CLU;yBDC,6CC;SKC;6CCG;kELE;6BFI,8BE;aKC;SDE;KRE;WOG,4BP;GDC;uBWG;GXG;4BYE;GZG"},"hasCjsExports":false},"type":"js/module"}]}