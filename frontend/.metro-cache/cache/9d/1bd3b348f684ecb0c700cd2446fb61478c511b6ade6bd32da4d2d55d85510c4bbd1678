{"dependencies":[{"name":"expo-location","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":42,"index":42}}],"key":"GNP7AGCKsBRUhlnTZ4lIPpbkT9E=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"LocationService\", {\n    enumerable: true,\n    get: function () {\n      return LocationService;\n    }\n  });\n  var _expoLocation = require(_dependencyMap[0], \"expo-location\");\n  var Location = _interopNamespace(_expoLocation);\n  class LocationService {\n    static watchId = null;\n\n    // Request location permissions\n    static async requestPermissions() {\n      try {\n        const {\n          status\n        } = await Location.requestForegroundPermissionsAsync();\n        return status === 'granted';\n      } catch (error) {\n        console.error('Error requesting location permissions:', error);\n        return false;\n      }\n    }\n\n    // Get current location\n    static async getCurrentLocation() {\n      try {\n        const hasPermission = await this.requestPermissions();\n        if (!hasPermission) {\n          throw new Error('Location permission not granted');\n        }\n        const location = await Location.getCurrentPositionAsync({\n          accuracy: Location.Accuracy.High\n        });\n        return {\n          latitude: location.coords.latitude,\n          longitude: location.coords.longitude,\n          accuracy: location.coords.accuracy || undefined,\n          timestamp: location.timestamp\n        };\n      } catch (error) {\n        console.error('Error getting current location:', error);\n        return null;\n      }\n    }\n\n    // Start watching location changes\n    static async startWatchingLocation(callback) {\n      try {\n        const hasPermission = await this.requestPermissions();\n        if (!hasPermission) {\n          throw new Error('Location permission not granted');\n        }\n        this.watchId = await Location.watchPositionAsync({\n          accuracy: Location.Accuracy.High,\n          timeInterval: 1000,\n          // Update every second\n          distanceInterval: 1 // Update every meter\n        }, location => {\n          callback({\n            latitude: location.coords.latitude,\n            longitude: location.coords.longitude,\n            accuracy: location.coords.accuracy || undefined,\n            timestamp: location.timestamp\n          });\n        });\n        return true;\n      } catch (error) {\n        console.error('Error starting location watch:', error);\n        return false;\n      }\n    }\n\n    // Stop watching location\n    static stopWatchingLocation() {\n      if (this.watchId) {\n        this.watchId.remove();\n        this.watchId = null;\n      }\n    }\n\n    // Calculate bearing between two coordinates using Haversine formula\n    static calculateBearing(userLat, userLon, targetLat, targetLon) {\n      const toRadians = degrees => degrees * (Math.PI / 180);\n      const toDegrees = radians => radians * (180 / Math.PI);\n      const φ1 = toRadians(userLat);\n      const φ2 = toRadians(targetLat);\n      const Δλ = toRadians(targetLon - userLon);\n      const y = Math.sin(Δλ) * Math.cos(φ2);\n      const x = Math.cos(φ1) * Math.sin(φ2) - Math.sin(φ1) * Math.cos(φ2) * Math.cos(Δλ);\n      const θ = Math.atan2(y, x);\n\n      // Convert to degrees and normalize to 0-360\n      const bearing = (toDegrees(θ) + 360) % 360;\n      return bearing;\n    }\n\n    // Calculate distance between two coordinates using Haversine formula\n    static calculateDistance(userLat, userLon, targetLat, targetLon) {\n      const toRadians = degrees => degrees * (Math.PI / 180);\n      const R = 6371; // Earth's radius in kilometers\n\n      const φ1 = toRadians(userLat);\n      const φ2 = toRadians(targetLat);\n      const Δφ = toRadians(targetLat - userLat);\n      const Δλ = toRadians(targetLon - userLon);\n      const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      return R * c; // Distance in kilometers\n    }\n\n    // Calculate bearing and distance data\n    static calculateBearingData(userLocation, targetLocation) {\n      const bearing = this.calculateBearing(userLocation.latitude, userLocation.longitude, targetLocation.latitude, targetLocation.longitude);\n      const distance = this.calculateDistance(userLocation.latitude, userLocation.longitude, targetLocation.latitude, targetLocation.longitude);\n      return {\n        bearing,\n        distance,\n        userLocation,\n        targetLocation\n      };\n    }\n\n    // Check if bearing is within alignment threshold (default 20 degrees)\n    static isAligned(currentHeading, targetBearing, threshold = 20) {\n      const diff = Math.abs(currentHeading - targetBearing);\n      return Math.min(diff, 360 - diff) <= threshold;\n    }\n\n    // Get turn direction and angle\n    static getTurnDirection(currentHeading, targetBearing) {\n      let diff = targetBearing - currentHeading;\n\n      // Normalize to -180 to 180\n      if (diff > 180) diff -= 360;\n      if (diff < -180) diff += 360;\n      return {\n        direction: diff > 0 ? 'right' : 'left',\n        angle: Math.abs(diff)\n      };\n    }\n  }\n});","lineCount":164,"map":[[22,2,18,0,"Object"],[22,8,18,0],[22,9,18,0,"defineProperty"],[22,23,18,0],[22,24,18,0,"exports"],[22,31,18,0],[23,4,18,0,"enumerable"],[23,14,18,0],[24,4,18,0,"get"],[24,7,18,0],[24,18,18,0,"get"],[24,19,18,0],[25,6,18,0],[25,13,18,0,"LocationService"],[25,28,18,0],[26,4,18,0],[27,2,18,0],[28,2,1,0],[28,6,1,0,"_expoLocation"],[28,19,1,0],[28,22,1,0,"require"],[28,29,1,0],[28,30,1,0,"_dependencyMap"],[28,44,1,0],[29,2,1,0],[29,6,1,0,"Location"],[29,14,1,0],[29,17,1,0,"_interopNamespace"],[29,34,1,0],[29,35,1,0,"_expoLocation"],[29,48,1,0],[30,2,18,7],[30,8,18,13,"LocationService"],[30,23,18,28],[30,24,18,29],[31,4,19,2],[31,11,19,17,"watchId"],[31,18,19,24],[31,21,19,65],[31,25,19,69],[33,4,21,2],[34,4,22,2],[34,17,22,15,"requestPermissions"],[34,35,22,33,"requestPermissions"],[34,36,22,33],[34,38,22,54],[35,6,23,4],[35,10,23,8],[36,8,24,6],[36,14,24,12],[37,10,24,14,"status"],[38,8,24,21],[38,9,24,22],[38,12,24,25],[38,18,24,31,"Location"],[38,26,24,39],[38,27,24,40,"requestForegroundPermissionsAsync"],[38,60,24,73],[38,61,24,74],[38,62,24,75],[39,8,25,6],[39,15,25,13,"status"],[39,21,25,19],[39,26,25,24],[39,35,25,33],[40,6,26,4],[40,7,26,5],[40,8,26,6],[40,15,26,13,"error"],[40,20,26,18],[40,22,26,20],[41,8,27,6,"console"],[41,15,27,13],[41,16,27,14,"error"],[41,21,27,19],[41,22,27,20],[41,62,27,60],[41,64,27,62,"error"],[41,69,27,67],[41,70,27,68],[42,8,28,6],[42,15,28,13],[42,20,28,18],[43,6,29,4],[44,4,30,2],[46,4,32,2],[47,4,33,2],[47,17,33,15,"getCurrentLocation"],[47,35,33,33,"getCurrentLocation"],[47,36,33,33],[47,38,33,66],[48,6,34,4],[48,10,34,8],[49,8,35,6],[49,14,35,12,"hasPermission"],[49,27,35,25],[49,30,35,28],[49,36,35,34],[49,40,35,38],[49,41,35,39,"requestPermissions"],[49,59,35,57],[49,60,35,58],[49,61,35,59],[50,8,36,6],[50,12,36,10],[50,13,36,11,"hasPermission"],[50,26,36,24],[50,28,36,26],[51,10,37,8],[51,16,37,14],[51,20,37,18,"Error"],[51,25,37,23],[51,26,37,24],[51,59,37,57],[51,60,37,58],[52,8,38,6],[53,8,40,6],[53,14,40,12,"location"],[53,22,40,20],[53,25,40,23],[53,31,40,29,"Location"],[53,39,40,37],[53,40,40,38,"getCurrentPositionAsync"],[53,63,40,61],[53,64,40,62],[54,10,41,8,"accuracy"],[54,18,41,16],[54,20,41,18,"Location"],[54,28,41,26],[54,29,41,27,"Accuracy"],[54,37,41,35],[54,38,41,36,"High"],[55,8,42,6],[55,9,42,7],[55,10,42,8],[56,8,44,6],[56,15,44,13],[57,10,45,8,"latitude"],[57,18,45,16],[57,20,45,18,"location"],[57,28,45,26],[57,29,45,27,"coords"],[57,35,45,33],[57,36,45,34,"latitude"],[57,44,45,42],[58,10,46,8,"longitude"],[58,19,46,17],[58,21,46,19,"location"],[58,29,46,27],[58,30,46,28,"coords"],[58,36,46,34],[58,37,46,35,"longitude"],[58,46,46,44],[59,10,47,8,"accuracy"],[59,18,47,16],[59,20,47,18,"location"],[59,28,47,26],[59,29,47,27,"coords"],[59,35,47,33],[59,36,47,34,"accuracy"],[59,44,47,42],[59,48,47,46,"undefined"],[59,57,47,55],[60,10,48,8,"timestamp"],[60,19,48,17],[60,21,48,19,"location"],[60,29,48,27],[60,30,48,28,"timestamp"],[61,8,49,6],[61,9,49,7],[62,6,50,4],[62,7,50,5],[62,8,50,6],[62,15,50,13,"error"],[62,20,50,18],[62,22,50,20],[63,8,51,6,"console"],[63,15,51,13],[63,16,51,14,"error"],[63,21,51,19],[63,22,51,20],[63,55,51,53],[63,57,51,55,"error"],[63,62,51,60],[63,63,51,61],[64,8,52,6],[64,15,52,13],[64,19,52,17],[65,6,53,4],[66,4,54,2],[68,4,56,2],[69,4,57,2],[69,17,57,15,"startWatchingLocation"],[69,38,57,36,"startWatchingLocation"],[69,39,57,37,"callback"],[69,47,57,79],[69,49,57,99],[70,6,58,4],[70,10,58,8],[71,8,59,6],[71,14,59,12,"hasPermission"],[71,27,59,25],[71,30,59,28],[71,36,59,34],[71,40,59,38],[71,41,59,39,"requestPermissions"],[71,59,59,57],[71,60,59,58],[71,61,59,59],[72,8,60,6],[72,12,60,10],[72,13,60,11,"hasPermission"],[72,26,60,24],[72,28,60,26],[73,10,61,8],[73,16,61,14],[73,20,61,18,"Error"],[73,25,61,23],[73,26,61,24],[73,59,61,57],[73,60,61,58],[74,8,62,6],[75,8,64,6],[75,12,64,10],[75,13,64,11,"watchId"],[75,20,64,18],[75,23,64,21],[75,29,64,27,"Location"],[75,37,64,35],[75,38,64,36,"watchPositionAsync"],[75,56,64,54],[75,57,65,8],[76,10,66,10,"accuracy"],[76,18,66,18],[76,20,66,20,"Location"],[76,28,66,28],[76,29,66,29,"Accuracy"],[76,37,66,37],[76,38,66,38,"High"],[76,42,66,42],[77,10,67,10,"timeInterval"],[77,22,67,22],[77,24,67,24],[77,28,67,28],[78,10,67,30],[79,10,68,10,"distanceInterval"],[79,26,68,26],[79,28,68,28],[79,29,68,29],[79,30,68,31],[80,8,69,8],[80,9,69,9],[80,11,70,9,"location"],[80,19,70,17],[80,23,70,22],[81,10,71,10,"callback"],[81,18,71,18],[81,19,71,19],[82,12,72,12,"latitude"],[82,20,72,20],[82,22,72,22,"location"],[82,30,72,30],[82,31,72,31,"coords"],[82,37,72,37],[82,38,72,38,"latitude"],[82,46,72,46],[83,12,73,12,"longitude"],[83,21,73,21],[83,23,73,23,"location"],[83,31,73,31],[83,32,73,32,"coords"],[83,38,73,38],[83,39,73,39,"longitude"],[83,48,73,48],[84,12,74,12,"accuracy"],[84,20,74,20],[84,22,74,22,"location"],[84,30,74,30],[84,31,74,31,"coords"],[84,37,74,37],[84,38,74,38,"accuracy"],[84,46,74,46],[84,50,74,50,"undefined"],[84,59,74,59],[85,12,75,12,"timestamp"],[85,21,75,21],[85,23,75,23,"location"],[85,31,75,31],[85,32,75,32,"timestamp"],[86,10,76,10],[86,11,76,11],[86,12,76,12],[87,8,77,8],[87,9,78,6],[87,10,78,7],[88,8,80,6],[88,15,80,13],[88,19,80,17],[89,6,81,4],[89,7,81,5],[89,8,81,6],[89,15,81,13,"error"],[89,20,81,18],[89,22,81,20],[90,8,82,6,"console"],[90,15,82,13],[90,16,82,14,"error"],[90,21,82,19],[90,22,82,20],[90,54,82,52],[90,56,82,54,"error"],[90,61,82,59],[90,62,82,60],[91,8,83,6],[91,15,83,13],[91,20,83,18],[92,6,84,4],[93,4,85,2],[95,4,87,2],[96,4,88,2],[96,11,88,9,"stopWatchingLocation"],[96,31,88,29,"stopWatchingLocation"],[96,32,88,29],[96,34,88,38],[97,6,89,4],[97,10,89,8],[97,14,89,12],[97,15,89,13,"watchId"],[97,22,89,20],[97,24,89,22],[98,8,90,6],[98,12,90,10],[98,13,90,11,"watchId"],[98,20,90,18],[98,21,90,19,"remove"],[98,27,90,25],[98,28,90,26],[98,29,90,27],[99,8,91,6],[99,12,91,10],[99,13,91,11,"watchId"],[99,20,91,18],[99,23,91,21],[99,27,91,25],[100,6,92,4],[101,4,93,2],[103,4,95,2],[104,4,96,2],[104,11,96,9,"calculateBearing"],[104,27,96,25,"calculateBearing"],[104,28,96,26,"userLat"],[104,35,96,41],[104,37,96,43,"userLon"],[104,44,96,58],[104,46,96,60,"targetLat"],[104,55,96,77],[104,57,96,79,"targetLon"],[104,66,96,96],[104,68,96,106],[105,6,97,4],[105,12,97,10,"toRadians"],[105,21,97,19],[105,24,97,23,"degrees"],[105,31,97,38],[105,35,97,43,"degrees"],[105,42,97,50],[105,46,97,54,"Math"],[105,50,97,58],[105,51,97,59,"PI"],[105,53,97,61],[105,56,97,64],[105,59,97,67],[105,60,97,68],[106,6,98,4],[106,12,98,10,"toDegrees"],[106,21,98,19],[106,24,98,23,"radians"],[106,31,98,38],[106,35,98,43,"radians"],[106,42,98,50],[106,46,98,54],[106,49,98,57],[106,52,98,60,"Math"],[106,56,98,64],[106,57,98,65,"PI"],[106,59,98,67],[106,60,98,68],[107,6,100,4],[107,12,100,10,"φ1"],[107,14,100,12],[107,17,100,15,"toRadians"],[107,26,100,24],[107,27,100,25,"userLat"],[107,34,100,32],[107,35,100,33],[108,6,101,4],[108,12,101,10,"φ2"],[108,14,101,12],[108,17,101,15,"toRadians"],[108,26,101,24],[108,27,101,25,"targetLat"],[108,36,101,34],[108,37,101,35],[109,6,102,4],[109,12,102,10,"Δλ"],[109,14,102,12],[109,17,102,15,"toRadians"],[109,26,102,24],[109,27,102,25,"targetLon"],[109,36,102,34],[109,39,102,37,"userLon"],[109,46,102,44],[109,47,102,45],[110,6,104,4],[110,12,104,10,"y"],[110,13,104,11],[110,16,104,14,"Math"],[110,20,104,18],[110,21,104,19,"sin"],[110,24,104,22],[110,25,104,23,"Δλ"],[110,27,104,25],[110,28,104,26],[110,31,104,29,"Math"],[110,35,104,33],[110,36,104,34,"cos"],[110,39,104,37],[110,40,104,38,"φ2"],[110,42,104,40],[110,43,104,41],[111,6,105,4],[111,12,105,10,"x"],[111,13,105,11],[111,16,105,14,"Math"],[111,20,105,18],[111,21,105,19,"cos"],[111,24,105,22],[111,25,105,23,"φ1"],[111,27,105,25],[111,28,105,26],[111,31,105,29,"Math"],[111,35,105,33],[111,36,105,34,"sin"],[111,39,105,37],[111,40,105,38,"φ2"],[111,42,105,40],[111,43,105,41],[111,46,105,44,"Math"],[111,50,105,48],[111,51,105,49,"sin"],[111,54,105,52],[111,55,105,53,"φ1"],[111,57,105,55],[111,58,105,56],[111,61,105,59,"Math"],[111,65,105,63],[111,66,105,64,"cos"],[111,69,105,67],[111,70,105,68,"φ2"],[111,72,105,70],[111,73,105,71],[111,76,105,74,"Math"],[111,80,105,78],[111,81,105,79,"cos"],[111,84,105,82],[111,85,105,83,"Δλ"],[111,87,105,85],[111,88,105,86],[112,6,107,4],[112,12,107,10,"θ"],[112,13,107,11],[112,16,107,14,"Math"],[112,20,107,18],[112,21,107,19,"atan2"],[112,26,107,24],[112,27,107,25,"y"],[112,28,107,26],[112,30,107,28,"x"],[112,31,107,29],[112,32,107,30],[114,6,109,4],[115,6,110,4],[115,12,110,10,"bearing"],[115,19,110,17],[115,22,110,20],[115,23,110,21,"toDegrees"],[115,32,110,30],[115,33,110,31,"θ"],[115,34,110,32],[115,35,110,33],[115,38,110,36],[115,41,110,39],[115,45,110,43],[115,48,110,46],[116,6,111,4],[116,13,111,11,"bearing"],[116,20,111,18],[117,4,112,2],[119,4,114,2],[120,4,115,2],[120,11,115,9,"calculateDistance"],[120,28,115,26,"calculateDistance"],[120,29,115,27,"userLat"],[120,36,115,42],[120,38,115,44,"userLon"],[120,45,115,59],[120,47,115,61,"targetLat"],[120,56,115,78],[120,58,115,80,"targetLon"],[120,67,115,97],[120,69,115,107],[121,6,116,4],[121,12,116,10,"toRadians"],[121,21,116,19],[121,24,116,23,"degrees"],[121,31,116,38],[121,35,116,43,"degrees"],[121,42,116,50],[121,46,116,54,"Math"],[121,50,116,58],[121,51,116,59,"PI"],[121,53,116,61],[121,56,116,64],[121,59,116,67],[121,60,116,68],[122,6,117,4],[122,12,117,10,"R"],[122,13,117,11],[122,16,117,14],[122,20,117,18],[122,21,117,19],[122,22,117,20],[124,6,119,4],[124,12,119,10,"φ1"],[124,14,119,12],[124,17,119,15,"toRadians"],[124,26,119,24],[124,27,119,25,"userLat"],[124,34,119,32],[124,35,119,33],[125,6,120,4],[125,12,120,10,"φ2"],[125,14,120,12],[125,17,120,15,"toRadians"],[125,26,120,24],[125,27,120,25,"targetLat"],[125,36,120,34],[125,37,120,35],[126,6,121,4],[126,12,121,10,"Δφ"],[126,14,121,12],[126,17,121,15,"toRadians"],[126,26,121,24],[126,27,121,25,"targetLat"],[126,36,121,34],[126,39,121,37,"userLat"],[126,46,121,44],[126,47,121,45],[127,6,122,4],[127,12,122,10,"Δλ"],[127,14,122,12],[127,17,122,15,"toRadians"],[127,26,122,24],[127,27,122,25,"targetLon"],[127,36,122,34],[127,39,122,37,"userLon"],[127,46,122,44],[127,47,122,45],[128,6,124,4],[128,12,124,10,"a"],[128,13,124,11],[128,16,124,14,"Math"],[128,20,124,18],[128,21,124,19,"sin"],[128,24,124,22],[128,25,124,23,"Δφ"],[128,27,124,25],[128,30,124,28],[128,31,124,29],[128,32,124,30],[128,35,124,33,"Math"],[128,39,124,37],[128,40,124,38,"sin"],[128,43,124,41],[128,44,124,42,"Δφ"],[128,46,124,44],[128,49,124,47],[128,50,124,48],[128,51,124,49],[128,54,125,14,"Math"],[128,58,125,18],[128,59,125,19,"cos"],[128,62,125,22],[128,63,125,23,"φ1"],[128,65,125,25],[128,66,125,26],[128,69,125,29,"Math"],[128,73,125,33],[128,74,125,34,"cos"],[128,77,125,37],[128,78,125,38,"φ2"],[128,80,125,40],[128,81,125,41],[128,84,126,14,"Math"],[128,88,126,18],[128,89,126,19,"sin"],[128,92,126,22],[128,93,126,23,"Δλ"],[128,95,126,25],[128,98,126,28],[128,99,126,29],[128,100,126,30],[128,103,126,33,"Math"],[128,107,126,37],[128,108,126,38,"sin"],[128,111,126,41],[128,112,126,42,"Δλ"],[128,114,126,44],[128,117,126,47],[128,118,126,48],[128,119,126,49],[129,6,127,4],[129,12,127,10,"c"],[129,13,127,11],[129,16,127,14],[129,17,127,15],[129,20,127,18,"Math"],[129,24,127,22],[129,25,127,23,"atan2"],[129,30,127,28],[129,31,127,29,"Math"],[129,35,127,33],[129,36,127,34,"sqrt"],[129,40,127,38],[129,41,127,39,"a"],[129,42,127,40],[129,43,127,41],[129,45,127,43,"Math"],[129,49,127,47],[129,50,127,48,"sqrt"],[129,54,127,52],[129,55,127,53],[129,56,127,54],[129,59,127,57,"a"],[129,60,127,58],[129,61,127,59],[129,62,127,60],[130,6,129,4],[130,13,129,11,"R"],[130,14,129,12],[130,17,129,15,"c"],[130,18,129,16],[130,19,129,17],[130,20,129,18],[131,4,130,2],[133,4,132,2],[134,4,133,2],[134,11,133,9,"calculateBearingData"],[134,31,133,29,"calculateBearingData"],[134,32,133,30,"userLocation"],[134,44,133,56],[134,46,133,58,"targetLocation"],[134,60,133,86],[134,62,133,101],[135,6,134,4],[135,12,134,10,"bearing"],[135,19,134,17],[135,22,134,20],[135,26,134,24],[135,27,134,25,"calculateBearing"],[135,43,134,41],[135,44,135,6,"userLocation"],[135,56,135,18],[135,57,135,19,"latitude"],[135,65,135,27],[135,67,136,6,"userLocation"],[135,79,136,18],[135,80,136,19,"longitude"],[135,89,136,28],[135,91,137,6,"targetLocation"],[135,105,137,20],[135,106,137,21,"latitude"],[135,114,137,29],[135,116,138,6,"targetLocation"],[135,130,138,20],[135,131,138,21,"longitude"],[135,140,139,4],[135,141,139,5],[136,6,141,4],[136,12,141,10,"distance"],[136,20,141,18],[136,23,141,21],[136,27,141,25],[136,28,141,26,"calculateDistance"],[136,45,141,43],[136,46,142,6,"userLocation"],[136,58,142,18],[136,59,142,19,"latitude"],[136,67,142,27],[136,69,143,6,"userLocation"],[136,81,143,18],[136,82,143,19,"longitude"],[136,91,143,28],[136,93,144,6,"targetLocation"],[136,107,144,20],[136,108,144,21,"latitude"],[136,116,144,29],[136,118,145,6,"targetLocation"],[136,132,145,20],[136,133,145,21,"longitude"],[136,142,146,4],[136,143,146,5],[137,6,148,4],[137,13,148,11],[138,8,149,6,"bearing"],[138,15,149,13],[139,8,150,6,"distance"],[139,16,150,14],[140,8,151,6,"userLocation"],[140,20,151,18],[141,8,152,6,"targetLocation"],[142,6,153,4],[142,7,153,5],[143,4,154,2],[145,4,156,2],[146,4,157,2],[146,11,157,9,"isAligned"],[146,20,157,18,"isAligned"],[146,21,157,19,"currentHeading"],[146,35,157,41],[146,37,157,43,"targetBearing"],[146,50,157,64],[146,52,157,66,"threshold"],[146,61,157,83],[146,64,157,86],[146,66,157,88],[146,68,157,99],[147,6,158,4],[147,12,158,10,"diff"],[147,16,158,14],[147,19,158,17,"Math"],[147,23,158,21],[147,24,158,22,"abs"],[147,27,158,25],[147,28,158,26,"currentHeading"],[147,42,158,40],[147,45,158,43,"targetBearing"],[147,58,158,56],[147,59,158,57],[148,6,159,4],[148,13,159,11,"Math"],[148,17,159,15],[148,18,159,16,"min"],[148,21,159,19],[148,22,159,20,"diff"],[148,26,159,24],[148,28,159,26],[148,31,159,29],[148,34,159,32,"diff"],[148,38,159,36],[148,39,159,37],[148,43,159,41,"threshold"],[148,52,159,50],[149,4,160,2],[151,4,162,2],[152,4,163,2],[152,11,163,9,"getTurnDirection"],[152,27,163,25,"getTurnDirection"],[152,28,163,26,"currentHeading"],[152,42,163,48],[152,44,163,50,"targetBearing"],[152,57,163,71],[152,59,163,121],[153,6,164,4],[153,10,164,8,"diff"],[153,14,164,12],[153,17,164,15,"targetBearing"],[153,30,164,28],[153,33,164,31,"currentHeading"],[153,47,164,45],[155,6,166,4],[156,6,167,4],[156,10,167,8,"diff"],[156,14,167,12],[156,17,167,15],[156,20,167,18],[156,22,167,20,"diff"],[156,26,167,24],[156,30,167,28],[156,33,167,31],[157,6,168,4],[157,10,168,8,"diff"],[157,14,168,12],[157,17,168,15],[157,18,168,16],[157,21,168,19],[157,23,168,21,"diff"],[157,27,168,25],[157,31,168,29],[157,34,168,32],[158,6,170,4],[158,13,170,11],[159,8,171,6,"direction"],[159,17,171,15],[159,19,171,17,"diff"],[159,23,171,21],[159,26,171,24],[159,27,171,25],[159,30,171,28],[159,37,171,35],[159,40,171,38],[159,46,171,44],[160,8,172,6,"angle"],[160,13,172,11],[160,15,172,13,"Math"],[160,19,172,17],[160,20,172,18,"abs"],[160,23,172,21],[160,24,172,22,"diff"],[160,28,172,26],[161,6,173,4],[161,7,173,5],[162,4,174,2],[163,2,175,0],[164,0,175,1],[164,3]],"functionMap":{"names":["<global>","LocationService","LocationService.requestPermissions","LocationService.getCurrentLocation","LocationService.startWatchingLocation","Location.watchPositionAsync$argument_1","LocationService.stopWatchingLocation","LocationService.calculateBearing","toRadians","toDegrees","LocationService.calculateDistance","LocationService.calculateBearingData","LocationService.isAligned","LocationService.getTurnDirection"],"mappings":"AAA;OCiB;ECI;GDQ;EEG;GFqB;EGG;QCa;SDO;GHQ;EKG;GLK;EMG;sBCC,8CD;sBEC,8CF;GNc;ESG;sBFC,8CE;GTc;EUG;GVqB;EWG;GXG;EYG;GZW"},"hasCjsExports":false},"type":"js/module"}]}